<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>假装很佛系</title>
  
  <subtitle>如果我们做不了大事，那就用大爱做一些小事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zsblogs.com/"/>
  <updated>2019-09-17T07:30:13.143Z</updated>
  <id>http://zsblogs.com/</id>
  
  <author>
    <name>张小帅</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ajax的应用及原理</title>
    <link href="http://zsblogs.com/2019/09/14/Ajax%E7%9A%84%E5%BA%94%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <id>http://zsblogs.com/2019/09/14/Ajax的应用及原理/</id>
    <published>2019-09-14T12:39:48.000Z</published>
    <updated>2019-09-17T07:30:13.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax的应用及原理"><a href="#Ajax的应用及原理" class="headerlink" title="Ajax的应用及原理"></a>Ajax的应用及原理</h2><blockquote><p><strong>AJAX</strong>即“<strong>Asynchronous JavaScript and XML</strong>”（异步的<a href="https://zh.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">JavaScript</a>与<a href="https://zh.wikipedia.org/wiki/XML" target="_blank" rel="noopener">XML</a>技术），指的是一套综合了多项技术的<a href="https://zh.wikipedia.org/wiki/瀏覽器" target="_blank" rel="noopener">浏览器</a>端<a href="https://zh.wikipedia.org/wiki/網頁" target="_blank" rel="noopener">网页</a>开发技术。</p></blockquote><a id="more"></a><h3 id="什么是异步？"><a href="#什么是异步？" class="headerlink" title="什么是异步？"></a>什么是异步？</h3><p><strong>举个例子：</strong></p><p>假如你要做两件事，烧水、刷牙<br>同步：你烧水，等水烧开了你再去刷牙<br>异步：你烧水，不等水烧开就去刷牙了，水烧开了会发出声音告诉你（callback），然后你再处理水烧开之后的事情</p><h3 id="为什么需要Ajax？"><a href="#为什么需要Ajax？" class="headerlink" title="为什么需要Ajax？"></a>为什么需要Ajax？</h3><ul><li>传统的web前端与后端的交互中，浏览器<strong>直接访问服务器</strong>来获取数据。服务器<strong>处理之后</strong>把数据发送给浏览器**。</li><li><strong>使用AJAX之</strong>，浏览器是先把请求发送到XMLHttpRequest异步对象之中，异步对象对请求进行封装，然后再与发送给服务器。<strong>服务器并不是以转发的方式响应，而是以流的方式把数据返回给浏览器</strong></li><li>XMLHttpRequest异步对象会不停监听服务器状态的变化，得到服务器返回的数据，就写到浏览器上【因为不是转发的方式，所以是无刷新就能够获取服务器端的数据</li><li>传统方式每当访问服务器都要<strong>刷新网页</strong>，如果只是需要获取<strong>部分数据</strong>的刷新，则需要<strong>重新请求整个网页</strong>内容，在资源上来说是一种浪费，同样浪费的还有时间。</li></ul><h3 id="Ajax的优点和缺点？"><a href="#Ajax的优点和缺点？" class="headerlink" title="Ajax的优点和缺点？"></a>Ajax的优点和缺点？</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>1、无刷新更新数据，响应迅捷，减少用户等待时间。<br>2、异步与服务器通信，不需要打断用户的操作减少不必要的数据传输、时间及降低网络上数据流量。<br>3、前端和后端负载平衡。减轻服务器的负担，AJAX的原则是“按需取数据”，可以最大程度的减少冗余请求和响应对服务器造成的负担，提升站点性能。<br>4、基于标准并被各大浏览器广泛支持，但需要客户允许JavaScript在浏览器上执行。<br>5、界面与应用分离（也可以说是数据与呈现分离），有利于分工合作。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p><strong>1、AJAX干掉了Back和History功能，即对浏览器机制的破坏。</strong><br>在动态更新页面的情况下，用户无法回到前一个页面状态，因为浏览器仅能记忆历史记录中的静态页面。一个被完整读入的页面与一个已经被动态修改过的页面之间的差别非常微妙；用户通常会希望单击后退按钮能够取消他们的前一次操作，但是在Ajax应用程序中，这将无法实现。<br>后退按钮是一个标准的web站点的重要功能，但是它没法和js进行<strong>很好的合作</strong>。这是Ajax所带来的一个比较<strong>严重的问题</strong>，因为用户往往是希望能够通过后退来取消前一次操作的。那么对于这个问题有没有办法？答案是肯定的，用过Gmail的知道，Gmail下面采用的Ajax技术解决了这个问题，在Gmail下面是可以后退的，但是，它也并不能改变Ajax的机制，它只是采用的一个比较笨但是有效的办法，即用户单击后退按钮访问历史记录时，通过创建或使用一个隐藏的IFRAME来重现页面上的变更。（例如，当用户在Google Maps中单击后退时，它在一个隐藏的IFRAME中进行搜索，然后将搜索结果反映到Ajax元素上，以便将应用程序状态恢复到当时的状态。）<br>但是，虽然说这个问题是可以解决的，但是它所带来的开发成本是非常高的，并与Ajax框架所要求的快速开发是相背离的。这是Ajax所带来的一个非常严重的问题。<br>一个相关的观点认为，使用动态页面更新使得用户难于将某个特定的状态保存到收藏夹中。该问题的解决方案也已出现，大部分都使用URL片断标识符（通常被称为锚点，即URL中#后面的部分）来保持跟踪，允许用户回到指定的某个应用程序状态。（许多浏览器允许JavaScript动态更新锚点，这使得Ajax应用程序能够在更新显示内容的同时更新锚点。）这些解决方案也同时解决了许多关于不支持后退按钮的争论。<br><strong>2、AJAX的安全问题。</strong><br>AJAX技术给用户带来很好的用户体验的同时也对IT企业带来了新的安全威胁，Ajax技术就如同对企业数据建立了一个直接通道。这使得开发者在不经意间会暴露比以前更多的数据和服务器逻辑。Ajax的逻辑可以对客户端的安全扫描技术隐藏起来，允许黑客从远端服务器上建立新的攻击。还有Ajax也难以避免一些已知的安全弱点，诸如跨站点脚步攻击、SQL注入攻击和基于Credentials的安全漏洞等等。<br><strong>3、对搜索引擎支持较弱。</strong><br>对搜索引擎的支持比较弱。如果使用不当，AJAX会增大网络数据的流量，从而降低整个系统的性能。<br><strong>4、破坏程序的异常处理机制。</strong><br>至少从目前看来，像Ajax.dll，Ajaxpro.dll这些Ajax框架是会破坏程序的异常机制的。关于这个问题，曾在开发过程中遇到过，但是查了一下网上几乎没有相关的介绍。后来做了一次试验，分别采用Ajax和传统的form提交的模式来删除一条数据……给我们的调试带来了很大的困难。<br><strong>5、违背URL和资源定位的初衷。</strong><br>例如，我给你一个URL地址，如果采用了Ajax技术，也许你在该URL地址下面看到的和我在这个URL地址下看到的内容是不同的。这个和资源定位的初衷是相背离的。<br><strong>6、AJAX不能很好支持移动设备。</strong><br>一些手持设备（如手机、PDA等）现在还不能很好的支持Ajax，比如说我们在手机的浏览器上打开采用Ajax技术的网站时，它目前是不支持的。<br><strong>7、客户端过肥，太多客户端代码造成开发上的成本。</strong><br>编写复杂、容易出错 ；冗余代码比较多（层层包含js文件是AJAX的通病，再加上以往的很多服务端代码现在放到了客户端）；破坏了Web的原有标准。</p><h3 id="5-AJAX注意点及适用和不适用场景"><a href="#5-AJAX注意点及适用和不适用场景" class="headerlink" title="5.AJAX注意点及适用和不适用场景"></a>5.AJAX注意点及适用和不适用场景</h3><p><strong>(1).注意点</strong><br>Ajax开发时，网络延迟——即用户发出请求到服务器发出响应之间的间隔——需要慎重考虑。不给予用户明确的回应，没有恰当的预读数据，或者对XMLHttpRequest的不恰当处理，都会使用户感到延迟，这是用户不希望看到的，也是他们无法理解的。通常的解决方案是，使用一个可视化的组件来告诉用户系统正在进行后台操作并且正在读取数据和内容。</p><p><strong>(2).Ajax适用场景</strong><br>1、表单驱动的交互<br>2、深层次的树的导航<br>3、快速的用户与用户间的交流响应<br>4、类似投票、yes/no等无关痛痒的场景<br>5、对数据进行过滤和操纵相关数据的场景<br>6、普通的文本输入提示和自动完成的场景<br><strong>(3).Ajax不适用场景</strong><br>1、部分简单的表单<br>2、搜索<br>3、基本的导航<br>4、替换大量的文本<br>5、对呈现的操纵</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ajax的应用及原理&quot;&gt;&lt;a href=&quot;#Ajax的应用及原理&quot; class=&quot;headerlink&quot; title=&quot;Ajax的应用及原理&quot;&gt;&lt;/a&gt;Ajax的应用及原理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AJAX&lt;/strong&gt;即“&lt;strong&gt;Asynchronous JavaScript and XML&lt;/strong&gt;”（异步的&lt;a href=&quot;https://zh.wikipedia.org/wiki/JavaScript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript&lt;/a&gt;与&lt;a href=&quot;https://zh.wikipedia.org/wiki/XML&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XML&lt;/a&gt;技术），指的是一套综合了多项技术的&lt;a href=&quot;https://zh.wikipedia.org/wiki/瀏覽器&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浏览器&lt;/a&gt;端&lt;a href=&quot;https://zh.wikipedia.org/wiki/網頁&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网页&lt;/a&gt;开发技术。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>BIO-NIO-AIO</title>
    <link href="http://zsblogs.com/2019/09/13/Java/BIO-NIO-AIO/"/>
    <id>http://zsblogs.com/2019/09/13/Java/BIO-NIO-AIO/</id>
    <published>2019-09-13T01:19:54.000Z</published>
    <updated>2019-09-13T01:21:22.130Z</updated>
    
    <content type="html"><![CDATA[<p>熟练掌握 BIO,NIO,AIO 的基本概念以及一些常见问题是你准备面试的过程中不可或缺的一部分，另外这些知识点也是你学习 Netty 的基础。</p><a id="more"></a><ul><li><a href="#bionioaio-总结">BIO,NIO,AIO 总结</a><ul><li><a href="#1-bio-blocking-io">1. BIO (Blocking I/O)</a><ul><li><a href="#11-传统-bio">1.1 传统 BIO</a></li><li><a href="#12-伪异步-io">1.2 伪异步 IO</a></li><li><a href="#13-代码示例">1.3 代码示例</a></li><li><a href="#14-总结">1.4 总结</a></li></ul></li><li><a href="#2-nio-new-io">2. NIO (New I/O)</a><ul><li><a href="#21-nio-简介">2.1 NIO 简介</a></li><li><a href="#22-nio的特性nio与io区别">2.2 NIO的特性/NIO与IO区别</a><ul><li><a href="#1non-blocking-io（非阻塞io）">1)Non-blocking IO（非阻塞IO）</a></li><li><a href="#2buffer缓冲区">2)Buffer(缓冲区)</a></li><li><a href="#3channel-通道">3)Channel (通道)</a></li><li><a href="#4selectors选择器">4)Selectors(选择器)</a></li></ul></li><li><a href="#23-nio-读数据和写数据方式">2.3  NIO 读数据和写数据方式</a></li><li><a href="#24-nio核心组件简单介绍">2.4 NIO核心组件简单介绍</a></li><li><a href="#25-代码示例">2.5 代码示例</a></li></ul></li><li><a href="#3-aio-asynchronous-io">3. AIO  (Asynchronous I/O)</a></li><li><a href="#参考">参考</a></li></ul></li></ul><h1 id="BIO-NIO-AIO-总结"><a href="#BIO-NIO-AIO-总结" class="headerlink" title="BIO,NIO,AIO 总结"></a>BIO,NIO,AIO 总结</h1><p> Java 中的 BIO、NIO和 AIO 理解为是 Java 语言对操作系统的各种 IO 模型的封装。程序员在使用这些 API 的时候，不需要关心操作系统层面的知识，也不需要根据不同操作系统编写不同的代码。只需要使用Java的API就可以了。</p><p>在讲 BIO,NIO,AIO 之前先来回顾一下这样几个概念：同步与异步，阻塞与非阻塞。</p><p><strong>同步与异步</strong></p><ul><li><strong>同步：</strong> 同步就是发起一个调用后，被调用者未处理完请求之前，调用不返回。</li><li><strong>异步：</strong> 异步就是发起一个调用后，立刻得到被调用者的回应表示已接收到请求，但是被调用者并没有返回结果，此时我们可以处理其他的请求，被调用者通常依靠事件，回调等机制来通知调用者其返回结果。</li></ul><p>同步和异步的区别最大在于异步的话调用者不需要等待处理结果，被调用者会通过回调等机制来通知调用者其返回结果。</p><p><strong>阻塞和非阻塞</strong></p><ul><li><strong>阻塞：</strong> 阻塞就是发起一个请求，调用者一直等待请求结果返回，也就是当前线程会被挂起，无法从事其他任务，只有当条件就绪才能继续。</li><li><strong>非阻塞：</strong> 非阻塞就是发起一个请求，调用者不用一直等着结果返回，可以先去干其他事情。</li></ul><p>举个生活中简单的例子，你妈妈让你烧水，小时候你比较笨啊，在那里傻等着水开（<strong>同步阻塞</strong>）。等你稍微再长大一点，你知道每次烧水的空隙可以去干点其他事，然后只需要时不时来看看水开了没有（<strong>同步非阻塞</strong>）。后来，你们家用上了水开了会发出声音的壶，这样你就只需要听到响声后就知道水开了，在这期间你可以随便干自己的事情，你需要去倒水了（<strong>异步非阻塞</strong>）。</p><h2 id="1-BIO-Blocking-I-O"><a href="#1-BIO-Blocking-I-O" class="headerlink" title="1. BIO (Blocking I/O)"></a>1. BIO (Blocking I/O)</h2><p>同步阻塞I/O模式，数据的读取写入必须阻塞在一个线程内等待其完成。</p><h3 id="1-1-传统-BIO"><a href="#1-1-传统-BIO" class="headerlink" title="1.1 传统 BIO"></a>1.1 传统 BIO</h3><p>BIO通信（一请求一应答）模型图如下(图源网络，原出处不明)：</p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2.png" alt="传统BIO通信模型图"></p><p>采用 <strong>BIO 通信模型</strong> 的服务端，通常由一个独立的 Acceptor 线程负责监听客户端的连接。我们一般通过在<code>while(true)</code> 循环中服务端会调用 <code>accept()</code> 方法等待接收客户端的连接的方式监听请求，请求一旦接收到一个连接请求，就可以建立通信套接字在这个通信套接字上进行读写操作，此时不能再接收其他客户端连接请求，只能等待同当前连接的客户端的操作执行完成， 不过可以通过多线程来支持多个客户端的连接，如上图所示。</p><p>如果要让 <strong>BIO 通信模型</strong> 能够同时处理多个客户端请求，就必须使用多线程（主要原因是<code>socket.accept()</code>、<code>socket.read()</code>、<code>socket.write()</code> 涉及的三个主要函数都是同步阻塞的），也就是说它在接收到客户端连接请求之后为每个客户端创建一个新的线程进行链路处理，处理完成之后，通过输出流返回应答给客户端，线程销毁。这就是典型的 <strong>一请求一应答通信模型</strong> 。我们可以设想一下如果这个连接不做任何事情的话就会造成不必要的线程开销，不过可以通过 <strong>线程池机制</strong> 改善，线程池还可以让线程的创建和回收成本相对较低。使用<code>FixedThreadPool</code> 可以有效的控制了线程的最大数量，保证了系统有限的资源的控制，实现了N(客户端请求数量):M(处理客户端请求的线程数量)的伪异步I/O模型（N 可以远远大于 M），下面一节”伪异步 BIO”中会详细介绍到。</p><p><strong>我们再设想一下当客户端并发访问量增加后这种模型会出现什么问题？</strong></p><p>在 Java 虚拟机中，线程是宝贵的资源，线程的创建和销毁成本很高，除此之外，线程的切换成本也是很高的。尤其在 Linux 这样的操作系统中，线程本质上就是一个进程，创建和销毁线程都是重量级的系统函数。如果并发访问量增加会导致线程数急剧膨胀可能会导致线程堆栈溢出、创建新线程失败等问题，最终导致进程宕机或者僵死，不能对外提供服务。</p><h3 id="1-2-伪异步-IO"><a href="#1-2-伪异步-IO" class="headerlink" title="1.2 伪异步 IO"></a>1.2 伪异步 IO</h3><p>为了解决同步阻塞I/O面临的一个链路需要一个线程处理的问题，后来有人对它的线程模型进行了优化一一一后端通过一个线程池来处理多个客户端的请求接入，形成客户端个数M：线程池最大线程数N的比例关系，其中M可以远远大于N.通过线程池可以灵活地调配线程资源，设置线程的最大值，防止由于海量并发接入导致线程耗尽。</p><p>伪异步IO模型图(图源网络，原出处不明)：</p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/3.png" alt="伪异步IO模型图"></p><p>采用线程池和任务队列可以实现一种叫做伪异步的 I/O 通信框架，它的模型图如上图所示。当有新的客户端接入时，将客户端的 Socket 封装成一个Task（该任务实现java.lang.Runnable接口）投递到后端的线程池中进行处理，JDK 的线程池维护一个消息队列和 N 个活跃线程，对消息队列中的任务进行处理。由于线程池可以设置消息队列的大小和最大线程数，因此，它的资源占用是可控的，无论多少个客户端并发访问，都不会导致资源的耗尽和宕机。</p><p>伪异步I/O通信框架采用了线程池实现，因此避免了为每个请求都创建一个独立线程造成的线程资源耗尽问题。不过因为它的底层仍然是同步阻塞的BIO模型，因此无法从根本上解决问题。</p><h3 id="1-3-代码示例"><a href="#1-3-代码示例" class="headerlink" title="1.3 代码示例"></a>1.3 代码示例</h3><p>下面代码中演示了BIO通信（一请求一应答）模型。我们会在客户端创建多个线程依次连接服务端并向其发送”当前时间+:hello world”，服务端会为每个客户端线程创建一个线程来处理。代码示例出自闪电侠的博客，原地址如下：        </p><p><a href="https://www.jianshu.com/p/a4e03835921a" target="_blank" rel="noopener">https://www.jianshu.com/p/a4e03835921a</a></p><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 闪电侠</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年10月14日</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO 创建多个线程，模拟多个客户端连接服务端</span></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">3333</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            socket.getOutputStream().write((<span class="keyword">new</span> Date() + <span class="string">": hello world"</span>).getBytes());</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 闪电侠</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018年10月14日</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// TODO 服务端处理客户端连接请求</span></span><br><span class="line">    ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">3333</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收到客户端连接请求之后为每个客户端创建一个新的线程进行链路处理</span></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 阻塞方法获取新的连接</span></span><br><span class="line">          Socket socket = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 每一个新的连接都创建一个线程，负责读取数据</span></span><br><span class="line">          <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">int</span> len;</span><br><span class="line">              <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">              InputStream inputStream = socket.getInputStream();</span><br><span class="line">              <span class="comment">// 按字节流方式读取数据</span></span><br><span class="line">              <span class="keyword">while</span> ((len = inputStream.read(data)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(data, <span class="number">0</span>, len));</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;).start();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-总结"><a href="#1-4-总结" class="headerlink" title="1.4 总结"></a>1.4 总结</h3><p>在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</p><h2 id="2-NIO-New-I-O"><a href="#2-NIO-New-I-O" class="headerlink" title="2. NIO (New I/O)"></a>2. NIO (New I/O)</h2><h3 id="2-1-NIO-简介"><a href="#2-1-NIO-简介" class="headerlink" title="2.1 NIO 简介"></a>2.1 NIO 简介</h3><p> NIO是一种同步非阻塞的I/O模型，在Java 1.4 中引入了NIO框架，对应 java.nio 包，提供了 Channel , Selector，Buffer等抽象。</p><p>NIO中的N可以理解为Non-blocking，不单纯是New。它支持面向缓冲的，基于通道的I/O操作方法。 NIO提供了与传统BIO模型中的 <code>Socket</code> 和 <code>ServerSocket</code> 相对应的 <code>SocketChannel</code> 和 <code>ServerSocketChannel</code> 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞I/O来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发。</p><h3 id="2-2-NIO的特性-NIO与IO区别"><a href="#2-2-NIO的特性-NIO与IO区别" class="headerlink" title="2.2 NIO的特性/NIO与IO区别"></a>2.2 NIO的特性/NIO与IO区别</h3><p>如果是在面试中回答这个问题，我觉得首先肯定要从 NIO 流是非阻塞 IO 而 IO 流是阻塞 IO 说起。然后，可以从 NIO 的3个核心组件/特性为 NIO 带来的一些改进来分析。如果，你把这些都回答上了我觉得你对于 NIO 就有了更为深入一点的认识，面试官问到你这个问题，你也能很轻松的回答上来了。</p><h4 id="1-Non-blocking-IO（非阻塞IO）"><a href="#1-Non-blocking-IO（非阻塞IO）" class="headerlink" title="1)Non-blocking IO（非阻塞IO）"></a>1)Non-blocking IO（非阻塞IO）</h4><p><strong>IO流是阻塞的，NIO流是不阻塞的。</strong></p><p>Java NIO使我们可以进行非阻塞IO操作。比如说，单线程中从通道读取数据到buffer，同时可以继续做别的事情，当数据读取到buffer中后，线程再继续处理数据。写数据也是一样的。另外，非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。</p><p>Java IO的各种流是阻塞的。这意味着，当一个线程调用 <code>read()</code> 或  <code>write()</code> 时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了</p><h4 id="2-Buffer-缓冲区"><a href="#2-Buffer-缓冲区" class="headerlink" title="2)Buffer(缓冲区)"></a>2)Buffer(缓冲区)</h4><p><strong>IO 面向流(Stream oriented)，而 NIO 面向缓冲区(Buffer oriented)。</strong></p><p>Buffer是一个对象，它包含一些要写入或者要读出的数据。在NIO类库中加入Buffer对象，体现了新库与原I/O的一个重要区别。在面向流的I/O中·可以将数据直接写入或者将数据直接读到 Stream 对象中。虽然 Stream 中也有 Buffer 开头的扩展类，但只是流的包装类，还是从流读到缓冲区，而 NIO 却是直接读到 Buffer 中进行操作。</p><p>在NIO厍中，所有数据都是用缓冲区处理的。在读取数据时，它是直接读到缓冲区中的; 在写入数据时，写入到缓冲区中。任何时候访问NIO中的数据，都是通过缓冲区进行操作。</p><p>最常用的缓冲区是 ByteBuffer,一个 ByteBuffer 提供了一组功能用于操作 byte 数组。除了ByteBuffer,还有其他的一些缓冲区，事实上，每一种Java基本类型（除了Boolean类型）都对应有一种缓冲区。</p><h4 id="3-Channel-通道"><a href="#3-Channel-通道" class="headerlink" title="3)Channel (通道)"></a>3)Channel (通道)</h4><p>NIO 通过Channel（通道） 进行读写。</p><p>通道是双向的，可读也可写，而流的读写是单向的。无论读写，通道只能和Buffer交互。因为 Buffer，通道可以异步地读写。</p><h4 id="4-Selectors-选择器"><a href="#4-Selectors-选择器" class="headerlink" title="4)Selectors(选择器)"></a>4)Selectors(选择器)</h4><p>NIO有选择器，而IO没有。</p><p>选择器用于使用单个线程处理多个通道。因此，它需要较少的线程来处理这些通道。线程之间的切换对于操作系统来说是昂贵的。 因此，为了提高系统效率选择器是有用的。</p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-2/Slector.png" alt="一个单线程中Slector维护3个Channel的示意图"></p><h3 id="2-3-NIO-读数据和写数据方式"><a href="#2-3-NIO-读数据和写数据方式" class="headerlink" title="2.3  NIO 读数据和写数据方式"></a>2.3  NIO 读数据和写数据方式</h3><p>通常来说NIO中的所有IO都是从 Channel（通道） 开始的。</p><ul><li>从通道进行数据读取 ：创建一个缓冲区，然后请求通道读取数据。</li><li>从通道进行数据写入 ：创建一个缓冲区，填充数据，并要求通道写入数据。</li></ul><p>数据读取和写入操作图示：</p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-2/NIO%E8%AF%BB%E5%86%99%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E5%BC%8F.png" alt="NIO读写数据的方式"></p><h3 id="2-4-NIO核心组件简单介绍"><a href="#2-4-NIO核心组件简单介绍" class="headerlink" title="2.4 NIO核心组件简单介绍"></a>2.4 NIO核心组件简单介绍</h3><p>NIO 包含下面几个核心的组件：</p><ul><li>Channel(通道)</li><li>Buffer(缓冲区)</li><li>Selector(选择器)</li></ul><p>整个NIO体系包含的类远远不止这三个，只能说这三个是NIO体系的“核心API”。我们上面已经对这三个概念进行了基本的阐述，这里就不多做解释了。</p><h3 id="2-5-代码示例"><a href="#2-5-代码示例" class="headerlink" title="2.5 代码示例"></a>2.5 代码示例</h3><p>代码示例出自闪电侠的博客，原地址如下：        </p><p><a href="https://www.jianshu.com/p/a4e03835921a" target="_blank" rel="noopener">https://www.jianshu.com/p/a4e03835921a</a></p><p>客户端 IOClient.java 的代码不变，我们对服务端使用 NIO 进行改造。以下代码较多而且逻辑比较复杂，大家看看就好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 闪电侠</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019年2月21日</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: NIO 改造后的服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. serverSelector负责轮询是否有新的连接，服务端监测到新的连接之后，不再创建一个新的线程，</span></span><br><span class="line">    <span class="comment">// 而是直接将新连接绑定到clientSelector上，这样就不用 IO 模型中 1w 个 while 循环在死等</span></span><br><span class="line">    Selector serverSelector = Selector.open();</span><br><span class="line">    <span class="comment">// 2. clientSelector负责轮询连接是否有数据可读</span></span><br><span class="line">    Selector clientSelector = Selector.open();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 对应IO编程中服务端启动</span></span><br><span class="line">        ServerSocketChannel listenerChannel = ServerSocketChannel.open();</span><br><span class="line">        listenerChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">3333</span>));</span><br><span class="line">        listenerChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        listenerChannel.register(serverSelector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="comment">// 监测是否有新的连接，这里的1指的是阻塞的时间为 1ms</span></span><br><span class="line">          <span class="keyword">if</span> (serverSelector.select(<span class="number">1</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Set&lt;SelectionKey&gt; set = serverSelector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIterator = set.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">              SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">// (1)</span></span><br><span class="line">                  <span class="comment">// 每来一个新连接，不需要创建一个线程，而是直接注册到clientSelector</span></span><br><span class="line">                  SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();</span><br><span class="line">                  clientChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                  clientChannel.register(clientSelector, SelectionKey.OP_READ);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                  keyIterator.remove();</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="comment">// (2) 批量轮询是否有哪些连接有数据可读，这里的1指的是阻塞的时间为 1ms</span></span><br><span class="line">          <span class="keyword">if</span> (clientSelector.select(<span class="number">1</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Set&lt;SelectionKey&gt; set = clientSelector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIterator = set.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">              SelectionKey key = keyIterator.next();</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                  SocketChannel clientChannel = (SocketChannel) key.channel();</span><br><span class="line">                  ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                  <span class="comment">// (3) 面向 Buffer</span></span><br><span class="line">                  clientChannel.read(byteBuffer);</span><br><span class="line">                  byteBuffer.flip();</span><br><span class="line">                  System.out.println(</span><br><span class="line">                      Charset.defaultCharset().newDecoder().decode(byteBuffer).toString());</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                  keyIterator.remove();</span><br><span class="line">                  key.interestOps(SelectionKey.OP_READ);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么大家都不愿意用 JDK 原生 NIO 进行开发呢？从上面的代码中大家都可以看出来，是真的难用！除了编程复杂、编程模型难之外，它还有以下让人诟病的问题：</p><ul><li>JDK 的 NIO 底层由 epoll 实现，该实现饱受诟病的空轮询 bug 会导致 cpu 飙升 100%</li><li>项目庞大之后，自行实现的 NIO 很容易出现各类 bug，维护成本较高，上面这一坨代码我都不能保证没有 bug</li></ul><p>Netty 的出现很大程度上改善了 JDK 原生 NIO 所存在的一些让人难以忍受的问题。</p><h3 id="3-AIO-Asynchronous-I-O"><a href="#3-AIO-Asynchronous-I-O" class="headerlink" title="3. AIO (Asynchronous I/O)"></a>3. AIO (Asynchronous I/O)</h3><p>AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的IO模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p><p>AIO 是异步IO的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO操作本身是同步的。（除了 AIO 其他的 IO 类型都是同步的，这一点可以从底层IO线程模型解释，推荐一篇文章：<a href="https://mp.weixin.qq.com/s?__biz=Mzg3MjA4MTExMw==&mid=2247484746&amp;idx=1&amp;sn=c0a7f9129d780786cabfcac0a8aa6bb7&source=41#wechat_redirect" target="_blank" rel="noopener">《漫话：如何给女朋友解释什么是Linux的五种IO模型？》</a> ）</p><p>查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Netty 权威指南》第二版</li><li><a href="https://zhuanlan.zhihu.com/p/23488863" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/23488863</a> (美团技术团队)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;熟练掌握 BIO,NIO,AIO 的基本概念以及一些常见问题是你准备面试的过程中不可或缺的一部分，另外这些知识点也是你学习 Netty 的基础。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>反射之基础篇</title>
    <link href="http://zsblogs.com/2019/09/12/Java/%E5%8F%8D%E5%B0%84%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://zsblogs.com/2019/09/12/Java/反射之基础篇/</id>
    <published>2019-09-12T08:39:00.000Z</published>
    <updated>2019-09-13T08:40:28.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反射之基础篇"><a href="#反射之基础篇" class="headerlink" title="反射之基础篇"></a>反射之基础篇</h2><p>本篇主要对反射的概念和常见用法进行介绍，未涉及底层源码分析。</p><blockquote><p>JAVA反射机制是在运行状态中，对于任意一个实体类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p></blockquote><a id="more"></a><p>反射常见的三种操作方式，假设有一个实体类Apple：</p><p><strong>第一种方式</strong>（也是最常用）：</p><p>Class  cla = Class.forName(“com.zs.reflect.Apple”);</p><p><strong>第二种方式</strong>：</p><p>Apple.class</p><p>该种方式主要适合当做实参来传递，从而进行对类的一系列操作</p><p><strong>第三种方式：</strong></p><p>Class cla = Class.forName(“com.zs.reflect.Apple”);</p><p>用法与第二种类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zs.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflect</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line"><span class="comment">//第一种较常用</span></span><br><span class="line"> <span class="comment">//Class cla = Class.forName("com.zs.reflect.Apple"); test(cla);</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">test(Apple.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三种</span></span><br><span class="line"><span class="comment">//Class cla = new Apple().getClass();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Class cla)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"类名："</span>+cla.getName());</span><br><span class="line">Field[] files = cla.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : files) &#123;</span><br><span class="line">System.out.println(<span class="string">"属性名："</span>+field );</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"包："</span>+cla.getPackage());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上三种获得的是Apple的<strong>类对象</strong>，</p><p>请注意，是<strong>类对象</strong>而不是<strong>类的对象</strong>，这意味着可以通过类对象cla调用反射底层所提供的方法，比如：</p><p><strong>类对象</strong>并不能直接访问调用类里的方法和属性，必须要根据<strong>类对象创建类的对象</strong></p><p>cla.getName();   //获得该类的包名加类名</p><p>cla.getDeclaredFields();  //  返回数组Field对象，表示此类或接口声明的所有字段类对象</p><p>cla.getPackage()；//返回此类的包</p><h2 id="反射学习"><a href="#反射学习" class="headerlink" title="反射学习:"></a>反射学习:</h2><h4 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h4><ul><li>Class.forName(“类的全限定路径”);        创建类对象使用较多</li><li>类名.class                            操作反射方法较多</li><li>对象名.getClass()                        操作反射方法较多</li><li>注意:     一个类只有一个类对象</li></ul><h4 id="操作类属性"><a href="#操作类属性" class="headerlink" title="操作类属性"></a>操作类属性</h4><ul><li>获取类对象</li><li>获取类属性</li><li>getFields()                        <strong>获取所有的公共字段包括父类</strong>            返回Field[]</li><li>getDeclaredFields()                <strong>获取所有声明的字段(不包括父类)</strong>        返回Field[]</li><li>getField(String name)            <strong>获取指定的公共字段包括父类</strong>            返回Field</li><li>getDeclaredField(String name)    <strong>获取指定的声明的字段(不包括父类)</strong>        返回Field</li></ul><h5 id="操作静态属性"><a href="#操作静态属性" class="headerlink" title="操作静态属性"></a>操作静态属性</h5><ul><li>类属性对象.get(null)             返回静态属性的值</li><li>类属性对象.set(null,”值”)        赋值</li></ul><h5 id="操作非静态属性"><a href="#操作非静态属性" class="headerlink" title="操作非静态属性"></a>操作非静态属性</h5><ul><li>类属性对象.get(Object obj);</li><li>类属性对象.set(Object obj,”值”);</li></ul><h4 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法:"></a>操作方法:</h4><ul><li>获取类对象</li><li>获取方法对象</li><li>getMethods()                                获取所有的公共方法包括父类</li><li>getDeclaredMethods()                        获取所有声明的方法不包括父类</li><li>getMethod(String name,Class…cla)            获取指定的公共方法</li><li>String name      表示方法名</li><li>Class…cla      表示方法接收的参数类型的类对象</li><li>getDeclaredMethod(String name,Class…cla)    获取指定的声明方法</li><li>String name      表示方法名</li><li>Class…cla      表示方法接收的参数类型的类对象</li></ul><h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><p>方法对象.invoke(null,参数值1,参数值2,….);</p><p>方法对象.invoke(null,null);</p><h5 id="非静态方法"><a href="#非静态方法" class="headerlink" title="非静态方法"></a>非静态方法</h5><p>Object obj=cla.newInstance();</p><p>方法对象.invoke(obj,参数值1,参数值2,….)</p><p>方法对象.invoke(obj,null)</p><h4 id="操作构造器"><a href="#操作构造器" class="headerlink" title="操作构造器:"></a>操作构造器:</h4><ul><li>获取类对象</li><li>获取构造器对象</li><li>操作构造器对象</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">*/</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestReflect</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchFieldException, SecurityException, NoSuchMethodException, IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class="line"><span class="comment">//反射操作类属性 </span></span><br><span class="line"><span class="comment">//operField();</span></span><br><span class="line"><span class="comment">//反射操作类方法</span></span><br><span class="line"><span class="comment">//operMethod();</span></span><br><span class="line"><span class="comment">//反射操作构造器</span></span><br><span class="line">operConstructor();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反射操作构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operConstructor</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, SecurityException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class="line"><span class="comment">//获取类对象</span></span><br><span class="line">Class cla=Class.forName(<span class="string">"com.bjsxt.pojo.Student"</span>);</span><br><span class="line"><span class="comment">//获取构造器方法对象</span></span><br><span class="line">Constructor[] cs=cla.getConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor c:cs)&#123;</span><br><span class="line">System.out.println(c.getName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取指定的构造器</span></span><br><span class="line">Constructor c=cla.getConstructor(String.class);</span><br><span class="line"><span class="comment">//创建实例化对象</span></span><br><span class="line">Object obj=c.newInstance(<span class="string">"女"</span>);</span><br><span class="line">System.out.println(cla.getDeclaredMethod(<span class="string">"getSsex"</span>,<span class="keyword">null</span>).invoke(obj,<span class="keyword">null</span>));</span><br><span class="line">Student s=<span class="keyword">new</span> Student(<span class="string">"女"</span>);</span><br><span class="line">System.out.println(s.getSsex());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//操作方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operMethod</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line"><span class="comment">//获取类对象</span></span><br><span class="line">Class cla=Class.forName(<span class="string">"com.bjsxt.pojo.Student"</span>);</span><br><span class="line"><span class="comment">//获取类方法对象</span></span><br><span class="line"><span class="comment">//获取所有的公共方法包括父类</span></span><br><span class="line">Method[] ms=cla.getMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m:ms)&#123;</span><br><span class="line">System.out.println(<span class="string">"获取方法名---&gt;"</span>+m.getName());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"************************************"</span>);</span><br><span class="line"><span class="comment">//获取所有声明的方法不包括父类</span></span><br><span class="line">Method[] ms2=cla.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span>(Method m:ms2)&#123;</span><br><span class="line">System.out.println(<span class="string">"获取方法名---&gt;"</span>+m.getName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取指定的公共方法包括父类</span></span><br><span class="line">Method m=cla.getMethod(<span class="string">"pHi"</span>, <span class="keyword">int</span>.class,String.class);</span><br><span class="line">System.out.println(m.getReturnType());</span><br><span class="line"><span class="comment">//获取指定的声明的方法,不包括父类</span></span><br><span class="line">Method m2=cla.getDeclaredMethod(<span class="string">"sHello"</span>,<span class="keyword">null</span>);</span><br><span class="line">System.out.println(m2.getName());</span><br><span class="line"><span class="comment">//执行方法</span></span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line">Method m3=cla.getDeclaredMethod(<span class="string">"sHi"</span>,String.class);</span><br><span class="line">m3.invoke(<span class="keyword">null</span>, <span class="string">"今天学了反射,好开心"</span>);</span><br><span class="line"><span class="comment">//非静态</span></span><br><span class="line">Method m4=cla.getDeclaredMethod(<span class="string">"sHi"</span>,<span class="keyword">int</span>.class,String.class);</span><br><span class="line">m4.invoke(cla.newInstance(), <span class="number">3</span>,<span class="string">"反射功能好强大"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operField</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, InstantiationException</span>&#123;</span><br><span class="line"><span class="comment">//获取类对象</span></span><br><span class="line">Class cla=Class.forName(<span class="string">"com.bjsxt.pojo.Student"</span>);</span><br><span class="line"><span class="comment">//获取反射类属性</span></span><br><span class="line"><span class="comment">//获取类及其父类的公共字段</span></span><br><span class="line">Field[] fds = cla.getFields();</span><br><span class="line"><span class="keyword">for</span>(Field f:fds)&#123;</span><br><span class="line">System.out.println(<span class="string">"获取属性名------&gt;"</span>+f.getName());</span><br><span class="line">System.out.println(<span class="string">"获取修饰符------&gt;"</span>+f.getModifiers());</span><br><span class="line">System.out.println(<span class="string">"获取类型------&gt;"</span>+f.getType());<span class="comment">//返回的是类型的Class对象</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"******************************"</span>);</span><br><span class="line"><span class="comment">//获取类声明的所有字段</span></span><br><span class="line">Field[] fds2=cla.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span>(Field f:fds2)&#123;</span><br><span class="line">System.out.println(<span class="string">"获取属性名-----&gt;"</span>+f.getName());</span><br><span class="line">System.out.println(<span class="string">"获取修饰符------&gt;"</span>+f.getModifiers());</span><br><span class="line">System.out.println(<span class="string">"获取类型------&gt;"</span>+f.getType());<span class="comment">//返回的是类型的Class对象</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"******************************"</span>);</span><br><span class="line"><span class="comment">//获取指定的字段</span></span><br><span class="line">Field f=cla.getField(<span class="string">"pname"</span>);<span class="comment">//指定获取类及其父类的公共字段</span></span><br><span class="line">System.out.println(f.getName());</span><br><span class="line">Field f2=cla.getDeclaredField(<span class="string">"money"</span>);<span class="comment">//指定获取类的所有字段</span></span><br><span class="line">System.out.println(f2.getName());</span><br><span class="line">Field f3=cla.getSuperclass().getDeclaredField(<span class="string">"pname"</span>);<span class="comment">//指定获取父类声明的字段</span></span><br><span class="line">System.out.println(f3.getName());</span><br><span class="line"><span class="comment">//操作字段值</span></span><br><span class="line">System.out.println(<span class="string">"************操作静态字段**********************"</span>);</span><br><span class="line"><span class="comment">//操作静态属性</span></span><br><span class="line">Field fs=cla.getDeclaredField(<span class="string">"money"</span>);</span><br><span class="line">fs.set(<span class="keyword">null</span>,<span class="number">2000</span>);</span><br><span class="line">System.out.println(fs.get(<span class="keyword">null</span>));</span><br><span class="line">System.out.println(<span class="string">"************操作非静态字段**********************"</span>);</span><br><span class="line"><span class="comment">//操作非静态属性</span></span><br><span class="line">Field fd=cla.getDeclaredField(<span class="string">"sname"</span>);</span><br><span class="line">Object obj=cla.newInstance();</span><br><span class="line">fd.set(obj, <span class="string">"李四"</span>);</span><br><span class="line">System.out.println(fd.get(obj));</span><br><span class="line"><span class="comment">//暴力反射操作私有化属性(了解)</span></span><br><span class="line">Field fd2=cla.getDeclaredField(<span class="string">"ssex"</span>);</span><br><span class="line">fd2.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射,操作私有化属性,不安全</span></span><br><span class="line">Object obj2=cla.newInstance();<span class="comment">//获取实例化对象</span></span><br><span class="line">System.out.println(fd2.get(obj2));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;反射之基础篇&quot;&gt;&lt;a href=&quot;#反射之基础篇&quot; class=&quot;headerlink&quot; title=&quot;反射之基础篇&quot;&gt;&lt;/a&gt;反射之基础篇&lt;/h2&gt;&lt;p&gt;本篇主要对反射的概念和常见用法进行介绍，未涉及底层源码分析。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JAVA反射机制是在运行状态中，对于任意一个实体类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>IoC容器之注解</title>
    <link href="http://zsblogs.com/2019/09/10/Java/IoC%E5%AE%B9%E5%99%A8%E4%B9%8B%E6%B3%A8%E8%A7%A3/"/>
    <id>http://zsblogs.com/2019/09/10/Java/IoC容器之注解/</id>
    <published>2019-09-10T13:29:53.000Z</published>
    <updated>2019-09-10T13:42:26.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IoC容器之注解"><a href="#IoC容器之注解" class="headerlink" title="IoC容器之注解"></a>IoC容器之注解</h2><p>如果你厌倦配置复杂的applicationContext.xml文件，我们可以找到另外一种方法去替代它：注解</p><blockquote><p>注解技术是在jdk5.0版本出现的，注解是一种符号标记，可以写在类定义前，方法定义前，成员变量定义前。<br>格式是：@标记名，常见的有@Test，@Service，@Override等标记。<br>现在注解配置在主流的框架如struts,hibernate,spring中得到广泛的应用，原因是注解方式直观方便，而且很多元素都不需要在Spring配置文件中定义了，这样大大简化了xml配置内容。<br>注解名在框架底层代码定义，通过反射技术，读取注解符号运行底层代码，实现相应的功能。</p></blockquote><a id="more"></a><p>首先使用注解，xml文件需增加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context=<span class="string">"http://www.springframework.org/schema/context"</span></span><br></pre></td></tr></table></figure><p>使用注解定义bean：通过注解的形式 将bean以及相应的属性值 放入ioc容器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"类名全路径"</span>&gt;</span>/context:component-scan&gt;</span><br></pre></td></tr></table></figure><p>Spring在启动的时候，会根据<strong>base-package</strong>在 该包中扫描所有类，查找这些类是否有注解@Component(“studentDao”),如果有，则将该类 加入spring Ioc容器。</p><p>@Component（范围太广，可以使用，但一般细化为三个方面）：</p><p>dao层注解：<strong>@Repository</strong><br>service层注解：<strong>@Service</strong><br>控制器层注解：<strong>@Controller</strong></p><p>这样一来不同的层次有惯用的注解，代码可读性增强。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IoC容器之注解&quot;&gt;&lt;a href=&quot;#IoC容器之注解&quot; class=&quot;headerlink&quot; title=&quot;IoC容器之注解&quot;&gt;&lt;/a&gt;IoC容器之注解&lt;/h2&gt;&lt;p&gt;如果你厌倦配置复杂的applicationContext.xml文件，我们可以找到另外一种方法去替代它：注解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注解技术是在jdk5.0版本出现的，注解是一种符号标记，可以写在类定义前，方法定义前，成员变量定义前。&lt;br&gt;格式是：@标记名，常见的有@Test，@Service，@Override等标记。&lt;br&gt;现在注解配置在主流的框架如struts,hibernate,spring中得到广泛的应用，原因是注解方式直观方便，而且很多元素都不需要在Spring配置文件中定义了，这样大大简化了xml配置内容。&lt;br&gt;注解名在框架底层代码定义，通过反射技术，读取注解符号运行底层代码，实现相应的功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入的三种方式</title>
    <link href="http://zsblogs.com/2019/09/10/Java/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://zsblogs.com/2019/09/10/Java/依赖注入的三种方式/</id>
    <published>2019-09-10T08:02:51.000Z</published>
    <updated>2019-09-10T13:17:18.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="依赖注入的三种方式"><a href="#依赖注入的三种方式" class="headerlink" title="依赖注入的三种方式"></a>依赖注入的三种方式</h2><p>在ioc容器中中定义bean的前提：该bean的类 必须提供了 无参构造！</p><p>这是实体类定义的属性，都有对应的get/set方法，为节省篇幅没有写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Teacher teacher;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="1、属性注入的两种方式（property）"><a href="#1、属性注入的两种方式（property）" class="headerlink" title="1、属性注入的两种方式（property）"></a>1、属性注入的两种方式（property）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.zs.test.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"teacher"</span> <span class="attr">ref</span>=<span class="string">"teacher"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--其实它还可以这样写--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.zs.test.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>18<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"teacher"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ref</span>&gt;</span>teacher<span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意： </p><ul><li>基本数据类型加String注入用value，对象注入采用ref</li><li>不仅仅可以通过name来注入，也可以用索引位置index，数据类型type等等都可以，也可以联合使用</li><li>如果没有指定name，那么value会默认注入String类型（因为都加引号），如果想给其他类型注入最好加上name来识别。</li></ul><p>属性注入两种方式的区别：</p><p>​            </p><table><thead><tr><th align="center"></th><th align="center">使用子元素value注入</th><th align="center">使用value属性注入</th></tr></thead><tbody><tr><td align="center">参数值位置</td><td align="center">写在首尾标签（<value></value>）的中间(不加双引号)</td><td align="center">写在value的属性值中（必须加双引号）</td></tr><tr><td align="center">type属性</td><td align="center">有（可选）可以通过type属性指定数据类型</td><td align="center">无</td></tr><tr><td align="center">参数值包含特殊字符（&lt;， &amp;）时的处理方法</td><td align="center">两种处理方法。一、使用<!--[CDATA[ 内容]]-->标记，二、使用XML预定义的实体引用</td><td align="center">一种处理方法。即使用XML预定义的实体引用</td></tr></tbody></table><table><thead><tr><th>实体引用</th><th>表示的符号</th></tr></thead><tbody><tr><td>&lt;</td><td>&lt;</td></tr><tr><td>&amp;</td><td>&amp;</td></tr><tr><td>&gt;</td><td>&gt;</td></tr></tbody></table><p>给对象类型赋值null ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> &gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">null</span>/&gt;</span>       --&gt;注意 没有<span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>赋空值 “”          </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> &gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、构造器注入（constructor）"><a href="#2、构造器注入（constructor）" class="headerlink" title="2、构造器注入（constructor）"></a>2、构造器注入（constructor）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.zs.test.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"李四"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"30"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">ref</span>=<span class="string">"teacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>最好按构造器参数顺序来赋值</li><li>其余注意与属性赋值类似</li></ul><h4 id="3、p命名空间注入"><a href="#3、p命名空间注入" class="headerlink" title="3、p命名空间注入"></a>3、p命名空间注入</h4><p>需要在文件顶部添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=<span class="string">"http://www.springframework.org/schema/p"</span></span><br></pre></td></tr></table></figure><p>注入方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.zs.test.Person"</span> <span class="attr">p:name</span>=<span class="string">"王五"</span> <span class="attr">p:age</span>=<span class="string">"90"</span> <span class="attr">p:teacher-ref</span>=<span class="string">"teacher&gt;&lt;/bean&gt;</span></span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>直接在bean标签内赋值</p></li><li><p>注入基本数据类型为:p:属性名=”值”，注入对象为p:对象名-ref=”对象”</p></li><li><p>多个注入之间必须以空格分隔</p></li></ul><h2 id="集合类型注入："><a href="#集合类型注入：" class="headerlink" title="集合类型注入："></a>集合类型注入：</h2><p>1、数组注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collectionDemo"</span> <span class="attr">class</span>=<span class="string">"org.lanqiao.entity.AllCollectionType"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arrayElement"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>足球1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>乒乓球1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、List、Set集合注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collectionDemo"</span> <span class="attr">class</span>=<span class="string">"org.lanqiao.entity.AllCollectionType"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"listElement"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>乒乓球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"listElement"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>足球xx<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球xx<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>乒乓球xxx<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、Map注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collectionDemo"</span> <span class="attr">class</span>=<span class="string">"org.lanqiao.entity.AllCollectionType"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapElement"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>foot<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>足球3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>basket<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>篮球3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>pp3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>乒乓球<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、property注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collectionDemo"</span> <span class="attr">class</span>=<span class="string">"org.lanqiao.entity.AllCollectionType"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propsElement"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"foot4"</span>&gt;</span>足球4<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"basket4"</span>&gt;</span>篮球4<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"pp4"</span>&gt;</span>乒乓球4<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：set、list、数组   各自都有自己的标签<set> <list> <array>，但是也可以混着用</array></list></set></p><h2 id="自动装配（只适用于ref类型）"><a href="#自动装配（只适用于ref类型）" class="headerlink" title="自动装配（只适用于ref类型）"></a>自动装配（只适用于ref类型）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">...class</span>=<span class="string">"org.lanqiao.entity.Course"</span>  <span class="attr">autowire</span>=<span class="string">"byName|byType|constructor|no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也就是给bean标签添加属性autowire，可选值有byName、byType、constructor</p><p>byName本质是byId<br>byName:  自动寻找：其他bean的id值=该Course类的属性名，不用写注入的代码<br>byType:  其他bean的类型(class)  是否与 该Course类的ref属性类型一致  （注意，此种方式 必须满足：当前Ioc容器中 只能有一个Bean满足条件  ）<br>constructor： 其他bean的类型(class)  是否与 该Course类的构造方法参数 的类型一致；此种方式的本质就是byType</p><p>还可以在头文件beans标签中中 一次性将该ioc容器的所有bean  统一设置成自动装配：<br>加入 default-autowire=”byName”</p><p>注意：自动装配虽然可以减少代码量，但是会降低程序的可读性，使用时需要谨慎。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;依赖注入的三种方式&quot;&gt;&lt;a href=&quot;#依赖注入的三种方式&quot; class=&quot;headerlink&quot; title=&quot;依赖注入的三种方式&quot;&gt;&lt;/a&gt;依赖注入的三种方式&lt;/h2&gt;&lt;p&gt;在ioc容器中中定义bean的前提：该bean的类 必须提供了 无参构造！&lt;/p&gt;
&lt;p&gt;这是实体类定义的属性，都有对应的get/set方法，为节省篇幅没有写。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; Teacher teacher;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Spring如何理解IoC（控制反转）与DI（依赖注入）？</title>
    <link href="http://zsblogs.com/2019/09/09/Java/Spring%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3ioc%EF%BC%88%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%EF%BC%89%E4%B8%8EDI%EF%BC%88%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%89%EF%BC%9F/"/>
    <id>http://zsblogs.com/2019/09/09/Java/Spring如何理解ioc（控制反转）与DI（依赖注入）？/</id>
    <published>2019-09-09T13:00:43.000Z</published>
    <updated>2019-09-10T00:31:14.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、如何理解IoC（控制反转）？"><a href="#1、如何理解IoC（控制反转）？" class="headerlink" title="1、如何理解IoC（控制反转）？"></a>1、如何理解IoC（控制反转）？</h2><h3 id="1-1、IoC是什么"><a href="#1-1、IoC是什么" class="headerlink" title="1.1、IoC是什么"></a>1.1、IoC是什么</h3><p>　　<strong>Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。</strong>在Java开发中，<strong>Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</strong>如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p><a id="more"></a><p>　　●<strong>谁控制谁，控制什么：</strong>传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；<strong>谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</strong></p><p>　　●<strong>为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？</strong>因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p><p>　　用图例说明一下，传统程序设计如图2-1，都是主动去创建相关对象然后再组合起来：</p><p><img src="https://i.loli.net/2019/09/10/MPKqlh6cTFwR9Wp.png" alt="img"></p><p>当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如图2-2所示:</p><p><img src="https://i.loli.net/2019/09/10/XYU7p2LozGKIH6v.jpg" alt="ioc"></p><h3 id="1-2、IoC能做什么"><a href="#1-2、IoC能做什么" class="headerlink" title="1.2、IoC能做什么"></a>1.2、IoC能做什么</h3><p>　　IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>　　其实<strong>IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</strong></p><p>　　<strong>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</strong></p><h2 id="2、如何理解DI（依赖注入）？"><a href="#2、如何理解DI（依赖注入）？" class="headerlink" title="2、如何理解DI（依赖注入）？"></a>2、如何理解DI（依赖注入）？</h2><p>　　<strong>DI—Dependency Injection，即“依赖注入”</strong>：<strong>组件之间依赖关系</strong>由容器在运行期决定，形象的说，即<strong>由容器动态的将某个依赖关系注入到组件之中</strong>。<strong>依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。</strong>通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p>　　理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p><p>　　●<strong>谁依赖于谁：</strong>当然是<strong>应用程序依赖于IoC容器</strong>；</p><p>　　●<strong>为什么需要依赖：</strong>应用程序需要IoC容器来提供对象需要的外部资源；</p><p>　　●<strong>谁注入谁：</strong>很明显是<strong>IoC容器注入应用程序某个对象，应用程序依赖的对象</strong>；</p><p>　　<strong>●注入了什么：</strong>就是<strong>注入某个对象所需要的外部资源（包括对象、资源、常量数据）</strong>。</p><p><strong>IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的</strong>。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。</p><p>　　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。</p><h2 id="3、IoC和DI由什么关系呢？"><a href="#3、IoC和DI由什么关系呢？" class="headerlink" title="3、IoC和DI由什么关系呢？"></a>3、IoC和DI<strong>由什么</strong>关系<strong>呢？</strong></h2><p>其实它们是同一个概念的不同角度描述<strong>，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，</strong>“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</p><blockquote><p>文章转载自：<a href="https://www.cnblogs.com/xdp-gacl/p/4249939.html" target="_blank" rel="noopener">谈谈对Spring  IoC的理解</a></p><p>个人感觉这篇文章真的是对新手特别友好，通读易懂，简直不要太舒服。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、如何理解IoC（控制反转）？&quot;&gt;&lt;a href=&quot;#1、如何理解IoC（控制反转）？&quot; class=&quot;headerlink&quot; title=&quot;1、如何理解IoC（控制反转）？&quot;&gt;&lt;/a&gt;1、如何理解IoC（控制反转）？&lt;/h2&gt;&lt;h3 id=&quot;1-1、IoC是什么&quot;&gt;&lt;a href=&quot;#1-1、IoC是什么&quot; class=&quot;headerlink&quot; title=&quot;1.1、IoC是什么&quot;&gt;&lt;/a&gt;1.1、IoC是什么&lt;/h3&gt;&lt;p&gt;　　&lt;strong&gt;Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。&lt;/strong&gt;在Java开发中，&lt;strong&gt;Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。&lt;/strong&gt;如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring入门</title>
    <link href="http://zsblogs.com/2019/09/09/Java/Spring%E5%85%A5%E9%97%A8/"/>
    <id>http://zsblogs.com/2019/09/09/Java/Spring入门/</id>
    <published>2019-09-09T11:12:26.000Z</published>
    <updated>2019-09-10T00:39:32.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JAVA框架之Spring基础环境搭建"><a href="#JAVA框架之Spring基础环境搭建" class="headerlink" title="JAVA框架之Spring基础环境搭建"></a>JAVA框架之Spring基础环境搭建</h2><blockquote><p><strong>Spring框架</strong>是 <a href="https://zh.wikipedia.org/wiki/Java" target="_blank" rel="noopener">Java</a> 平台的一个<a href="https://zh.wikipedia.org/wiki/开放源代码" target="_blank" rel="noopener">开源</a>的全栈（Full-stack）<a href="https://zh.wikipedia.org/wiki/软件框架" target="_blank" rel="noopener">应用程序框架</a>和<a href="https://zh.wikipedia.org/wiki/控制反转" target="_blank" rel="noopener">控制反转</a>容器实现，一般被直接称为 Spring。该框架的一些核心功能理论上可用于任何 Java 应用，但 Spring 还为基于<a href="https://zh.wikipedia.org/wiki/Jakarta_EE" target="_blank" rel="noopener">Java企业版</a>平台构建的 Web 应用提供了大量的拓展支持。虽然 Spring 没有直接实现任何的编程模型，但它已经在 Java 社区中广为流行，基本上完全代替了<a href="https://zh.wikipedia.org/wiki/EJB" target="_blank" rel="noopener">企业级JavaBeans</a>（EJB）模型</p></blockquote><a id="more"></a><h4 id="1-搭建Spring环境"><a href="#1-搭建Spring环境" class="headerlink" title="1.搭建Spring环境"></a>1.搭建Spring环境</h4><p>下载jar包<br><a href="http://maven.springframework.org/release/org/springframework/spring/" target="_blank" rel="noopener">http://maven.springframework.org/release/org/springframework/spring/</a><br>根据版本选择，这里我选择的是spring-framework-4.3.9.RELEASE-dist.zip<br>开发spring至少需要使用的jar(5个+1个):<br>spring-aop.jar        开发AOP特性时需要的JAR<br>spring-beans.jar    处理Bean的jar            <bean><br>spring-context.jar    处理spring上下文的jar        <context><br>spring-core.jar        spring核心jar<br>spring-expression.jar    spring表达式<br>第三方提供的日志jar<br>commons-logging.jar    日志</context></bean></p><p>下载完之后集体加载到类路径，也就是Build Path。</p><h4 id="2-编写配置文件"><a href="#2-编写配置文件" class="headerlink" title="2.编写配置文件"></a>2.编写配置文件</h4><p>为了编写时有一些提示、自动生成一些配置信息，我们需要安装sts插件：<br>方式一：增加sts插件<br>可以给eclipse增加 支持spring的插件：spring tool suite(<a href="https://spring.io/tools/sts/all" target="_blank" rel="noopener">https://spring.io/tools/sts/all</a>)<br>下载(根据自己的eclipse版本选择)springsource-tool-suite-3.9.4.RELEASE-e4.7.3a-updatesite.zip,</p><p>然后在Eclipse中安装：Help-&gt;Install new SoftWare-&gt;  Add</p><p>方式二：<br>直接下载sts工具（相当于一个集合了Spring tool suite的Eclipse）: <a href="https://spring.io/tools/sts/,下载完成之后打开运行。它相当于一个自带sts的eclipse。" target="_blank" rel="noopener">https://spring.io/tools/sts/,下载完成之后打开运行。它相当于一个自带sts的eclipse。</a></p><p>新建配置文件：</p><p>new File -&gt;搜索spring或bean-&gt;选择Spring Bean Configuration File-&gt;起名为：applicationContext.xml(大家公认写法)</p><p>配置xml文件，新增bean标签，书写如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--属性注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.zs.test.Person"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>id :唯一标识符（也就是实例名）  class：类型（也就是类的路径）</p><p>property:代表属性注入（还有另外一种构造器注入，这里先不做介绍）</p><p>name ：属性名    value：赋值    </p><p>3.开发Spring程序(IOC-控制反转)，编写测试类TestSpring</p><p>自行写好实体类Student。</p><p>测试类方法里输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext conext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>) ;</span><br><span class="line"><span class="comment">//执行从springIOC容器中获取一个 id为student的对象</span></span><br><span class="line">Student student = (Student)conext.getBean(<span class="string">"student"</span>) ;</span><br><span class="line">System.out.println(student.getName);</span><br></pre></td></tr></table></figure><p>springioc容器 会自动帮我们new了对象，并且给对象赋了值</p><p>查看输出结果：张三</p><p>此篇主要概括spring项目搭建的大致流程，具体细节会在后面一一介绍。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JAVA框架之Spring基础环境搭建&quot;&gt;&lt;a href=&quot;#JAVA框架之Spring基础环境搭建&quot; class=&quot;headerlink&quot; title=&quot;JAVA框架之Spring基础环境搭建&quot;&gt;&lt;/a&gt;JAVA框架之Spring基础环境搭建&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Spring框架&lt;/strong&gt;是 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Java&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java&lt;/a&gt; 平台的一个&lt;a href=&quot;https://zh.wikipedia.org/wiki/开放源代码&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开源&lt;/a&gt;的全栈（Full-stack）&lt;a href=&quot;https://zh.wikipedia.org/wiki/软件框架&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;应用程序框架&lt;/a&gt;和&lt;a href=&quot;https://zh.wikipedia.org/wiki/控制反转&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;控制反转&lt;/a&gt;容器实现，一般被直接称为 Spring。该框架的一些核心功能理论上可用于任何 Java 应用，但 Spring 还为基于&lt;a href=&quot;https://zh.wikipedia.org/wiki/Jakarta_EE&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java企业版&lt;/a&gt;平台构建的 Web 应用提供了大量的拓展支持。虽然 Spring 没有直接实现任何的编程模型，但它已经在 Java 社区中广为流行，基本上完全代替了&lt;a href=&quot;https://zh.wikipedia.org/wiki/EJB&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;企业级JavaBeans&lt;/a&gt;（EJB）模型&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>前言</title>
    <link href="http://zsblogs.com/2019/09/08/%E5%89%8D%E8%A8%80/"/>
    <id>http://zsblogs.com/2019/09/08/前言/</id>
    <published>2019-09-08T11:50:43.000Z</published>
    <updated>2019-09-08T12:03:45.898Z</updated>
    
    <content type="html"><![CDATA[<p>你迷茫的原因在于读书太少而想的太多。</p><p>你问我有哪些进步？我开始成为我自己的朋友。</p><p>如果每个人都能理解你，那你得普通成什么样子。</p><p>若能避开猛烈的狂喜，自然不会有悲痛来袭。</p><p>你看到的世界其实就是你自己的样子。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你迷茫的原因在于读书太少而想的太多。&lt;/p&gt;
&lt;p&gt;你问我有哪些进步？我开始成为我自己的朋友。&lt;/p&gt;
&lt;p&gt;如果每个人都能理解你，那你得普通成什么样子。&lt;/p&gt;
&lt;p&gt;若能避开猛烈的狂喜，自然不会有悲痛来袭。&lt;/p&gt;
&lt;p&gt;你看到的世界其实就是你自己的样子。&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Maven环境配置(基于Eclipse)</title>
    <link href="http://zsblogs.com/2019/09/07/Java/Maven%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-%E5%9F%BA%E4%BA%8EEclipse/"/>
    <id>http://zsblogs.com/2019/09/07/Java/Maven环境配置-基于Eclipse/</id>
    <published>2019-09-07T11:34:40.000Z</published>
    <updated>2019-09-08T09:11:47.277Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Apache Maven</strong>，是一个<a href="https://zh.wikipedia.org/wiki/软件" target="_blank" rel="noopener">软件</a>（特别是<a href="https://zh.wikipedia.org/wiki/Java_(编程语言)" target="_blank" rel="noopener">Java</a>软件）<a href="https://zh.wikipedia.org/wiki/项目管理" target="_blank" rel="noopener">项目管理</a>及<a href="https://zh.wikipedia.org/wiki/自动构建" target="_blank" rel="noopener">自动构建</a>工具，由<a href="https://zh.wikipedia.org/wiki/Apache软件基金会" target="_blank" rel="noopener">Apache软件基金会</a>所提供。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。</p><p>Maven也可被用于构建和管理各种项目，例如<a href="https://zh.wikipedia.org/wiki/C♯" target="_blank" rel="noopener">C#</a>，<a href="https://zh.wikipedia.org/wiki/Ruby" target="_blank" rel="noopener">Ruby</a>，<a href="https://zh.wikipedia.org/wiki/Scala" target="_blank" rel="noopener">Scala</a>和其他语言编写的项目。Maven曾是<a href="https://zh.wikipedia.org/wiki/Jakarta项目" target="_blank" rel="noopener">Jakarta项目</a>的子项目，现为由<a href="https://zh.wikipedia.org/wiki/Apache软件基金会" target="_blank" rel="noopener">Apache软件基金会</a>主持的独立Apache项目。</p></blockquote><a id="more"></a><h3 id="一、安装Maven"><a href="#一、安装Maven" class="headerlink" title="一、安装Maven"></a>一、安装Maven</h3><p>1、Maven下载、解压<br>2、设置环境变量 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、新建变量M2_HOME，值为Maven的目录X:\XXX\apache-maven-XXX</span><br><span class="line">2、Path变量：将%M2_HOME%\bin添加到Path变量下</span><br></pre></td></tr></table></figure><p>3、运行CMD，输入mvn -v后可以看到Maven的版本信息等则表示安装成功</p><p>4、报错信息处理(如果正常输出版本信息则省略)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.不是内部或外部命令</span><br><span class="line">    解决方案：</span><br><span class="line">    编辑环境变量Path，以前是（%MAVEN_HOME%\bin\），改为E:\Mavenaven\apache-maven-3.5.0\bin(也就是bin目录的绝对路径)</span><br><span class="line">    重启DOS窗口。</span><br><span class="line"></span><br><span class="line">2.报错</span><br><span class="line">    Exception in thread “main”</span><br><span class="line">    java.lang.UnsupportedClassVersionError</span><br><span class="line">    这个错误是因为maven版本和jdk版本不兼容，需要更换jdk或maven版本</span><br></pre></td></tr></table></figure><h3 id="二、修改本地仓库的位置：（X-XXX-apache-maven-3-5-3指的是maven解压之后的路径，即环境变量M2-HOME的值）"><a href="#二、修改本地仓库的位置：（X-XXX-apache-maven-3-5-3指的是maven解压之后的路径，即环境变量M2-HOME的值）" class="headerlink" title="二、修改本地仓库的位置：（X:\XXX\apache-maven-3.5.3指的是maven解压之后的路径，即环境变量M2_HOME的值）"></a>二、修改本地仓库的位置：（X:\XXX\apache-maven-3.5.3指的是maven解压之后的路径，即环境变量M2_HOME的值）</h3><p>X:\XXX\apache-maven-3.5.3\conf\settings.xml文件：添加如下语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/Java/maven/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、Maven镜像更换为阿里云中央仓库："><a href="#三、Maven镜像更换为阿里云中央仓库：" class="headerlink" title="三、Maven镜像更换为阿里云中央仓库："></a>三、Maven镜像更换为阿里云中央仓库：</h3><p>X:\XXX\apache-maven-3.5.3\conf\settings.xml文件：在<mirrors>标签下添加如下语句：</mirrors></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt; </span><br><span class="line">  &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">  &lt;name&gt;aliyun maven&lt;/name&gt; </span><br><span class="line">  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; </span><br><span class="line">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><h3 id="四、Eclipse中配置maven、创建maven项目"><a href="#四、Eclipse中配置maven、创建maven项目" class="headerlink" title="四、Eclipse中配置maven、创建maven项目"></a>四、Eclipse中配置maven、创建maven项目</h3><p>配置maven：<a href="https://www.cnblogs.com/pengyan-9826/p/7767070.html" target="_blank" rel="noopener">https://www.cnblogs.com/pengyan-9826/p/7767070.html</a><br>创建maven项目：<a href="https://blog.csdn.net/u012081441/article/details/75201197" target="_blank" rel="noopener">https://blog.csdn.net/u012081441/article/details/75201197</a></p><h3 id="五、安装spring-tool-suit插件"><a href="#五、安装spring-tool-suit插件" class="headerlink" title="五、安装spring-tool-suit插件"></a>五、安装spring-tool-suit插件</h3><p><a href="https://www.cnblogs.com/MrYoodb/p/7574566.html" target="_blank" rel="noopener">https://www.cnblogs.com/MrYoodb/p/7574566.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Apache Maven&lt;/strong&gt;，是一个&lt;a href=&quot;https://zh.wikipedia.org/wiki/软件&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;软件&lt;/a&gt;（特别是&lt;a href=&quot;https://zh.wikipedia.org/wiki/Java_(编程语言)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java&lt;/a&gt;软件）&lt;a href=&quot;https://zh.wikipedia.org/wiki/项目管理&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目管理&lt;/a&gt;及&lt;a href=&quot;https://zh.wikipedia.org/wiki/自动构建&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自动构建&lt;/a&gt;工具，由&lt;a href=&quot;https://zh.wikipedia.org/wiki/Apache软件基金会&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache软件基金会&lt;/a&gt;所提供。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。&lt;/p&gt;
&lt;p&gt;Maven也可被用于构建和管理各种项目，例如&lt;a href=&quot;https://zh.wikipedia.org/wiki/C♯&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C#&lt;/a&gt;，&lt;a href=&quot;https://zh.wikipedia.org/wiki/Ruby&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruby&lt;/a&gt;，&lt;a href=&quot;https://zh.wikipedia.org/wiki/Scala&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Scala&lt;/a&gt;和其他语言编写的项目。Maven曾是&lt;a href=&quot;https://zh.wikipedia.org/wiki/Jakarta项目&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jakarta项目&lt;/a&gt;的子项目，现为由&lt;a href=&quot;https://zh.wikipedia.org/wiki/Apache软件基金会&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache软件基金会&lt;/a&gt;主持的独立Apache项目。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Servlet+Jsp项目实战</title>
    <link href="http://zsblogs.com/2019/09/07/Java/Servlet-Jsp%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    <id>http://zsblogs.com/2019/09/07/Java/Servlet-Jsp项目实战/</id>
    <published>2019-09-07T07:44:45.000Z</published>
    <updated>2019-09-13T08:58:36.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息管理系统"><a href="#信息管理系统" class="headerlink" title="信息管理系统"></a>信息管理系统</h2><h3 id="技术需求"><a href="#技术需求" class="headerlink" title="技术需求"></a>技术需求</h3><ul><li>Servlet+jsp+mvc+jdbc</li></ul><a id="more"></a><h3 id="软件需求："><a href="#软件需求：" class="headerlink" title="软件需求："></a>软件需求：</h3><ul><li>开发工具：myEclipse</li><li>数据库：MYSQL</li><li>服务器：Tomcat</li><li>浏览器：Firefox</li></ul><h3 id="硬件需求："><a href="#硬件需求：" class="headerlink" title="硬件需求："></a>硬件需求：</h3><ul><li>一台电脑</li></ul><h3 id="功能需求："><a href="#功能需求：" class="headerlink" title="功能需求："></a>功能需求：</h3><ul><li>完成用户登录</li><li>完成用户注册</li><li>完成用户退出</li><li>完成查看个人信息</li><li>完成修改密码</li><li>完成查询所有用户信息</li></ul><h3 id="数据库设计："><a href="#数据库设计：" class="headerlink" title="数据库设计："></a>数据库设计：</h3><p>创建用户表：t_user</p><p>表结构设计：</p><table><thead><tr><th align="center">字段名</th><th align="center">类型</th><th align="center">约束</th></tr></thead><tbody><tr><td align="center">uid</td><td align="center">int(10)</td><td align="center">主键、非空、自增</td></tr><tr><td align="center">uname</td><td align="center">varchar(50)</td><td align="center">非空</td></tr><tr><td align="center">pwd</td><td align="center">varchar(50)</td><td align="center">非空</td></tr><tr><td align="center">sex</td><td align="center">char(2)</td><td align="center">非空</td></tr><tr><td align="center">age</td><td align="center">int(3)</td><td align="center"></td></tr><tr><td align="center">birth</td><td align="center">date</td><td align="center"></td></tr></tbody></table><h3 id="代码规范："><a href="#代码规范：" class="headerlink" title="代码规范："></a>代码规范：</h3><h5 id="命名规范："><a href="#命名规范：" class="headerlink" title="命名规范："></a>命名规范：</h5><ul><li>包名：com.zs.*</li><li>类名：首字母大写，见名知意</li><li>变量名和方法名：驼峰原则，见名知意</li></ul><h5 id="注释规范："><a href="#注释规范：" class="headerlink" title="注释规范："></a>注释规范：</h5><ul><li>方法功能注释</li><li>方法体核心位置必须有说明注释</li></ul><h5 id="日志规范："><a href="#日志规范：" class="headerlink" title="日志规范："></a>日志规范：</h5><ul><li>使用log4j进行日志输出</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;信息管理系统&quot;&gt;&lt;a href=&quot;#信息管理系统&quot; class=&quot;headerlink&quot; title=&quot;信息管理系统&quot;&gt;&lt;/a&gt;信息管理系统&lt;/h2&gt;&lt;h3 id=&quot;技术需求&quot;&gt;&lt;a href=&quot;#技术需求&quot; class=&quot;headerlink&quot; title=&quot;技术需求&quot;&gt;&lt;/a&gt;技术需求&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Servlet+jsp+mvc+jdbc&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Jsp知识点整合</title>
    <link href="http://zsblogs.com/2019/09/07/Java/Jsp%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E5%90%88/"/>
    <id>http://zsblogs.com/2019/09/07/Java/Jsp知识点整合/</id>
    <published>2019-09-07T03:30:42.000Z</published>
    <updated>2019-09-08T12:52:37.181Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JSP 与 PHP、ASP、ASP.NET 等语言类似，运行在服务端的语言。</p><p>JSP（全称Java Server Pages）是由 Sun Microsystems 公司倡导和许多公司参与共同创建的一种使软件开发者可以响应客户端请求，而动态生成 HTML、XML 或其他格式文档的Web网页的技术标准。</p><p>JSP 技术是以 Java 语言作为脚本语言的，JSP 网页为整个服务器端的 Java 库单元提供了一个接口来服务于HTTP的应用程序。</p><p>JSP文件后缀名为 <strong>*.jsp</strong> 。</p><p>JSP开发的WEB应用可以跨平台使用，既可以运行在 Linux 上也能运行在 Windows 上。</p></blockquote><a id="more"></a><h3 id="Jsp的三种注释"><a href="#Jsp的三种注释" class="headerlink" title="Jsp的三种注释"></a>Jsp的三种注释</h3><p>前端语言注释：会被转译，也会被发送<br>java语言注释：会被转译，不会被servlet执行<br>Jsp注释：不会被转译</p><h3 id="Jsp的Page指令："><a href="#Jsp的Page指令：" class="headerlink" title="Jsp的Page指令："></a>Jsp的Page指令：</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> 属性名=<span class="string">"属性值"</span> 属性名=<span class="string">"属性值"</span> ...%&gt;</span><br></pre></td></tr></table></figure><p>​            <strong>language</strong>:声明jsp要被转义的语言（其实只能java）。<br>​            <strong>import</strong>：导入java包，不同的包使用逗号隔开<br>​            <strong>pageEncoding</strong>：当前jsp文件所保存的编码格式。<br>​            <strong>session</strong>:设置转义的servlet中是否开启session支持<br>​            <strong>errorPage</strong>：设置jsp运行错误跳转的页面<br>​            <strong>extends</strong>：设置jsp转义的java文件要继承的父类（包名加类名）<br>​<br>​    <strong>作用</strong>：<br>​        配置jsp文件转译相关的参数，必须要有。</p><h3 id="jsp的局部代码块："><a href="#jsp的局部代码块：" class="headerlink" title="jsp的局部代码块："></a>jsp的局部代码块：</h3><p>​    <strong>声明java代码</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%  <span class="keyword">int</span> i = <span class="number">4</span>;out.println(i);%&gt;</span><br></pre></td></tr></table></figure><p>​    <strong>特点</strong>：局部代码块中声明的java代码会被原样转译到对应servlet文件的_JspServlce方法中<br>​    <strong>缺点</strong>：使用局部代码快在jsp中进行逻辑判断，书写麻烦，阅读困难！<br>​    </p><h3 id="jsp的全局代码块："><a href="#jsp的全局代码块：" class="headerlink" title="jsp的全局代码块："></a>jsp的全局代码块：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"全局代码块"</span>);</span><br><span class="line">&#125;%&gt;</span><br></pre></td></tr></table></figure><p>​    特点：声明的java代码作为全局代码转译到sevlet中，不在servlce方法里。<br>​    注意：全局代码快声明的代码需要局部代码快调用。<br>​    </p><h3 id="jsp的脚本段语句："><a href="#jsp的脚本段语句：" class="headerlink" title="jsp的脚本段语句："></a>jsp的脚本段语句：</h3><p>​    特点：帮助我们快速的获取变量或者方法的返回值作为数据响应给浏览器<br>​    使用：&lt;%=变量名或方法%&gt;,<br>​    注意：不要在后面加分号<br>​    注意使用位置，不要瞎写。<br>​    </p><h3 id="jsp的静态引入和动态引入："><a href="#jsp的静态引入和动态引入：" class="headerlink" title="jsp的静态引入和动态引入："></a>jsp的静态引入和动态引入：</h3><p>​    <strong>静态引入</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@include file=&quot;要引入文件的相对路径&quot; %&gt;</span><br></pre></td></tr></table></figure><p>​        <strong>特点</strong>：<br>​            会将引入的jsp文件和当前jsp文件转译成一个java文件使用。<br>​        <strong>注意</strong>：</p><p>​            静态引入的jsp文件不会单独转译成单个java（Servlet）文件。<br>​            不能有同名变量。<br>  动态引入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"要引入的jsp文件的相对路径"</span>%&gt;</span><br></pre></td></tr></table></figure><p>​        特点：<br>​            会将引入法人jsp文件单独转译，也就是会新转译出一个java文件。<br>​            在当前转译好的java文件中调用引入的jsp文件的转译java文件，在网页中显示合并后的结果。<br>​            因为是两个文件，调用关系，所以可以存在同名变量。<br>​<br>​        注意：<br>​            动态引入允许声明同名变量<br>引入的优点：<br>​        降低jsp代码的冗余，便于维护升级。<br>​        </p><h3 id="jsp的转发标签–forward："><a href="#jsp的转发标签–forward：" class="headerlink" title="jsp的转发标签–forward："></a>jsp的转发标签–forward：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=&quot;要转发的jsp文件的相对路径&quot;&gt;&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure><p>​     特点：<br>​         一次请求<br>​         地址栏信息不改变<br>​     注意：<br>​         转发标签的额两个标签之间不能有空格<br>​         但是可以写&lt;jsp:param name=”str” value=”aaa” /&gt;,它会将数据以？的形式拼接在转发路径的后面<br>​         转发之后如何接收：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=request.getParameter(<span class="string">"str"</span>)%&gt;  可以直接输出value的值。</span><br></pre></td></tr></table></figure><p>​         </p><h3 id="jsp的九大内置对象："><a href="#jsp的九大内置对象：" class="headerlink" title="jsp的九大内置对象："></a>jsp的九大内置对象：</h3><p>​    内置对象：jsp文件在转移成对应的Servlet文件的时候，自动生成的并声明的变量。<br>​    注意：<br>​        内置对象在jsp页面中使用，使用局部代码快或脚本段语句来使用，不能再全局代码块中使用<br>​    九大对象：<br>​        pageContext：页面上下文对象，封存了其他内置对象。<br>​                注意：每个Jsp文件单独拥有一个pageContext对象<br>​                作用域：当前页面。<br>​        request：封存当前请求数据的对象，由tomcat服务器创建，一次请求。<br>​        session：此对象用来存储用户的不同请求的共享数据的，一次会话。<br>​        application：也就是ServletContext对象，一个项目只有一个，存储用户共享数据的对象，以及完成其他操作。<br>​        response：响应对象，用来响应请求处理结果给浏览器的对象，设置响应头，重定向。<br>​        out:响应对象，Jsp内部使用，带有缓冲区的响应对象，效率高于response对象。<br>​        Page：代表当前Jsp的对象，相当于Java中的this（其实转译完之后就是this….）。<br>​        exception：异常对象，存储了当前的运行异常信息。<br>​                注意：使用此对象需要在Page中设置属性isErrorPage=”true”开启。<br>​        config：也就是ServletConfig，主要用来获取web.xml的配置数据，完成一些初始化数据的读取。<br>​        </p><h3 id="Jsp四大作用域："><a href="#Jsp四大作用域：" class="headerlink" title="Jsp四大作用域："></a>Jsp四大作用域：</h3><p>​    <strong>pageContext</strong>：当前页面，当前页面内的数据共享。<br>​    <strong>request</strong>：一次请求内的servlet的数据共享，通过请求转发，将数据流转给下一个servlet。<br>​    <strong>session</strong>：一次会话。一个用户的不同请求数据的共享。将数据从一次请求流转给其他请求。<br>​    <strong>application</strong>：项目内。不同用户的数据共享问题。将数据从一个用户流转给其他用户。<br>​    <strong>作用</strong>：<br>​        数据的流转！</p><h3 id="Jsp的路径"><a href="#Jsp的路径" class="headerlink" title="Jsp的路径:"></a>Jsp的路径:</h3><p>​    在Jsp中资源路径可以使用<strong>相对路径</strong>完成跳转，但是：<br>​        问题一：资源的位置不可以随意更改。<br>​        问题二：需要使用../进行文件夹的跳出，使用麻烦，可读性较低。<br>​    使用<strong>绝对路径</strong>（开发最常用，必须会）：<br>​        /虚拟项目名/项目资源路径<br>​        “/“代表服务器根目录<br>​        相当于：ip:端口号   例如：localhost:8080<br>​    <strong>Jsp中自带的全局路径声明</strong>：<br>​        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path+<span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>​        还有head标签下的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>作用</strong>：给资源全面加项目路径：<a href="http://127.0.0.1:8080/虚拟项目名/" target="_blank" rel="noopener">http://127.0.0.1:8080/虚拟项目名/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JSP 与 PHP、ASP、ASP.NET 等语言类似，运行在服务端的语言。&lt;/p&gt;
&lt;p&gt;JSP（全称Java Server Pages）是由 Sun Microsystems 公司倡导和许多公司参与共同创建的一种使软件开发者可以响应客户端请求，而动态生成 HTML、XML 或其他格式文档的Web网页的技术标准。&lt;/p&gt;
&lt;p&gt;JSP 技术是以 Java 语言作为脚本语言的，JSP 网页为整个服务器端的 Java 库单元提供了一个接口来服务于HTTP的应用程序。&lt;/p&gt;
&lt;p&gt;JSP文件后缀名为 &lt;strong&gt;*.jsp&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;JSP开发的WEB应用可以跨平台使用，既可以运行在 Linux 上也能运行在 Windows 上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Servlet转发与重定向的区别和联系</title>
    <link href="http://zsblogs.com/2019/09/06/Java/Servlet%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://zsblogs.com/2019/09/06/Java/Servlet转发与重定向的区别/</id>
    <published>2019-09-06T06:43:26.000Z</published>
    <updated>2019-09-07T07:23:07.912Z</updated>
    
    <content type="html"><![CDATA[<p>本人正在学习java，之前一直困扰二者有什么区别，经过一番查阅资料，终于恍然大悟。</p><p>Servlet的转发有两种：转发和重定向。</p><p><strong>转发</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpServletRequest.getRequestDispatcher(&quot;资源路径&quot;).forward(httpServletRequest, httpServletResponse);</span><br></pre></td></tr></table></figure><p><strong>重定向</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpServletResponse.sendRedirect(&quot;/资源路径&quot;);</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>转发的过程</strong>：</p><ul><li>浏览器向服务器发送请求</li><li>服务器接收请求并处理请求</li><li>这时服务器发现有转发代码存在,</li><li>直接跳转到新的资源（注意：这个过程是连续的，在这个过程中session可以跟随传递）</li><li>网页显示返回结果，地址栏不会变化</li></ul><p><strong>重定向的过程</strong>：</p><ul><li>浏览器向服务器发送请求</li><li>服务器接收请求并处理请求</li><li>这时服务器发现有重定向代码存在</li><li>服务器会立即通知浏览器，告诉它，你去访问这个资源</li><li>这时浏览器会对新资源重新发起访问（这个过程是断开的，中间不连续）</li><li>地址栏产生相应的变化</li></ul><p><strong>二者的区别</strong>：</p><ul><li>转发地址栏不会变化，重定向会变化。</li><li>转发是一次请求，而重定向是两次。</li><li>转发速度较快，重定向较慢（因为浏览器要重新发起请求）。</li><li>由于重定向是重新对资源发起访问，而浏览器默认访问方式为get，所以对应的新响应要换成get，当然这是默认情况。注意一下即可。</li><li>转发不会造成信息丢失，而重定向则会造成信息丢失。</li><li>转发只能将请求转发给同一个WEB应用中的组件，重定向可以指向任何的资源，包括当前应用程序中的其他资源，同一个站点上的其他应用程序中的资源，其他站点的资源。**</li></ul><p>如何选择转发还是重定向？</p><p><strong>典型的应用场景</strong>：</p><p>​        <strong>转发：访问 Servlet 处理业务逻辑，然后 forward 到 jsp 显示处理结果，浏览器里 URL 不变</strong></p><p>​        <strong>重定向:提交表单，处理成功后 redirect 到另一个 jsp，防止表单重复提交，浏览器里 URL 变了</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本人正在学习java，之前一直困扰二者有什么区别，经过一番查阅资料，终于恍然大悟。&lt;/p&gt;
&lt;p&gt;Servlet的转发有两种：转发和重定向。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;转发&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;httpServletRequest.getRequestDispatcher(&amp;quot;资源路径&amp;quot;).forward(httpServletRequest, httpServletResponse);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;重定向&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;httpServletResponse.sendRedirect(&amp;quot;/资源路径&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
