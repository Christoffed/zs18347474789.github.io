<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>假装很佛系</title>
  
  <subtitle>如果我们做不了大事，那就用大爱做一些小事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zsblogs.com/"/>
  <updated>2019-09-09T13:29:30.525Z</updated>
  <id>http://zsblogs.com/</id>
  
  <author>
    <name>张小帅</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring如何理解IoC（控制反转）与DI（依赖注入）？</title>
    <link href="http://zsblogs.com/2019/09/09/Spring%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3ioc%EF%BC%88%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%EF%BC%89%E4%B8%8EDI%EF%BC%88%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%89%EF%BC%9F/"/>
    <id>http://zsblogs.com/2019/09/09/Spring如何理解ioc（控制反转）与DI（依赖注入）？/</id>
    <published>2019-09-09T13:00:43.000Z</published>
    <updated>2019-09-09T13:29:30.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、如何理解IoC（控制反转）？"><a href="#1、如何理解IoC（控制反转）？" class="headerlink" title="1、如何理解IoC（控制反转）？"></a>1、如何理解IoC（控制反转）？</h2><h3 id="1-1、IoC是什么"><a href="#1-1、IoC是什么" class="headerlink" title="1.1、IoC是什么"></a>1.1、IoC是什么</h3><p>　　<strong>Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。</strong>在Java开发中，<strong>Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</strong>如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p><a id="more"></a><p>　　●<strong>谁控制谁，控制什么：</strong>传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；<strong>谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</strong></p><p>　　●<strong>为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？</strong>因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p><p>　　用图例说明一下，传统程序设计如图2-1，都是主动去创建相关对象然后再组合起来：</p><p><img src="C:%5CUsers%5C%E5%BC%A0%E5%B8%85%5CDesktop%5Cblog%5Cmyblog%5Csource%5Cimages%5Cioc.png" alt="img"></p><p>当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如图2-2所示:</p><p><img src="C:%5CUsers%5C%E5%BC%A0%E5%B8%85%5CDesktop%5Cblog%5Cmyblog%5Csource%5Cimages%5Cioc2.jpg" alt="ioc"></p><h3 id="1-2、IoC能做什么"><a href="#1-2、IoC能做什么" class="headerlink" title="1.2、IoC能做什么"></a>1.2、IoC能做什么</h3><p>　　IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>　　其实<strong>IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</strong></p><p>　　<strong>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</strong></p><h2 id="2、如何理解DI（依赖注入）？"><a href="#2、如何理解DI（依赖注入）？" class="headerlink" title="2、如何理解DI（依赖注入）？"></a>2、如何理解DI（依赖注入）？</h2><p>　　<strong>DI—Dependency Injection，即“依赖注入”</strong>：<strong>组件之间依赖关系</strong>由容器在运行期决定，形象的说，即<strong>由容器动态的将某个依赖关系注入到组件之中</strong>。<strong>依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。</strong>通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p>　　理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p><p>　　●<strong>谁依赖于谁：</strong>当然是<strong>应用程序依赖于IoC容器</strong>；</p><p>　　●<strong>为什么需要依赖：</strong>应用程序需要IoC容器来提供对象需要的外部资源；</p><p>　　●<strong>谁注入谁：</strong>很明显是<strong>IoC容器注入应用程序某个对象，应用程序依赖的对象</strong>；</p><p>　　<strong>●注入了什么：</strong>就是<strong>注入某个对象所需要的外部资源（包括对象、资源、常量数据）</strong>。</p><p><strong>IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的</strong>。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。</p><p>　　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。</p><h2 id="3、IoC和DI由什么关系呢？"><a href="#3、IoC和DI由什么关系呢？" class="headerlink" title="3、IoC和DI由什么关系呢？"></a>3、IoC和DI<strong>由什么</strong>关系<strong>呢？</strong></h2><p>其实它们是同一个概念的不同角度描述<strong>，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，</strong>“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</p><blockquote><p>文章转载自：<a href="https://www.cnblogs.com/xdp-gacl/p/4249939.html" target="_blank" rel="noopener">谈谈对Spring  IoC的理解</a></p><p>个人感觉这篇文章真的是对新手特别友好，通读易懂，简直不要太舒服。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、如何理解IoC（控制反转）？&quot;&gt;&lt;a href=&quot;#1、如何理解IoC（控制反转）？&quot; class=&quot;headerlink&quot; title=&quot;1、如何理解IoC（控制反转）？&quot;&gt;&lt;/a&gt;1、如何理解IoC（控制反转）？&lt;/h2&gt;&lt;h3 id=&quot;1-1、IoC是什么&quot;&gt;&lt;a href=&quot;#1-1、IoC是什么&quot; class=&quot;headerlink&quot; title=&quot;1.1、IoC是什么&quot;&gt;&lt;/a&gt;1.1、IoC是什么&lt;/h3&gt;&lt;p&gt;　　&lt;strong&gt;Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。&lt;/strong&gt;在Java开发中，&lt;strong&gt;Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。&lt;/strong&gt;如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前言</title>
    <link href="http://zsblogs.com/2019/09/08/%E5%89%8D%E8%A8%80/"/>
    <id>http://zsblogs.com/2019/09/08/前言/</id>
    <published>2019-09-08T11:50:43.000Z</published>
    <updated>2019-09-08T12:03:45.898Z</updated>
    
    <content type="html"><![CDATA[<p>你迷茫的原因在于读书太少而想的太多。</p><p>你问我有哪些进步？我开始成为我自己的朋友。</p><p>如果每个人都能理解你，那你得普通成什么样子。</p><p>若能避开猛烈的狂喜，自然不会有悲痛来袭。</p><p>你看到的世界其实就是你自己的样子。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你迷茫的原因在于读书太少而想的太多。&lt;/p&gt;
&lt;p&gt;你问我有哪些进步？我开始成为我自己的朋友。&lt;/p&gt;
&lt;p&gt;如果每个人都能理解你，那你得普通成什么样子。&lt;/p&gt;
&lt;p&gt;若能避开猛烈的狂喜，自然不会有悲痛来袭。&lt;/p&gt;
&lt;p&gt;你看到的世界其实就是你自己的样子。&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Maven环境配置(基于Eclipse)</title>
    <link href="http://zsblogs.com/2019/09/07/Maven%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-%E5%9F%BA%E4%BA%8EEclipse/"/>
    <id>http://zsblogs.com/2019/09/07/Maven环境配置-基于Eclipse/</id>
    <published>2019-09-07T11:34:40.000Z</published>
    <updated>2019-09-08T09:11:47.277Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Apache Maven</strong>，是一个<a href="https://zh.wikipedia.org/wiki/软件" target="_blank" rel="noopener">软件</a>（特别是<a href="https://zh.wikipedia.org/wiki/Java_(编程语言)" target="_blank" rel="noopener">Java</a>软件）<a href="https://zh.wikipedia.org/wiki/项目管理" target="_blank" rel="noopener">项目管理</a>及<a href="https://zh.wikipedia.org/wiki/自动构建" target="_blank" rel="noopener">自动构建</a>工具，由<a href="https://zh.wikipedia.org/wiki/Apache软件基金会" target="_blank" rel="noopener">Apache软件基金会</a>所提供。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。</p><p>Maven也可被用于构建和管理各种项目，例如<a href="https://zh.wikipedia.org/wiki/C♯" target="_blank" rel="noopener">C#</a>，<a href="https://zh.wikipedia.org/wiki/Ruby" target="_blank" rel="noopener">Ruby</a>，<a href="https://zh.wikipedia.org/wiki/Scala" target="_blank" rel="noopener">Scala</a>和其他语言编写的项目。Maven曾是<a href="https://zh.wikipedia.org/wiki/Jakarta项目" target="_blank" rel="noopener">Jakarta项目</a>的子项目，现为由<a href="https://zh.wikipedia.org/wiki/Apache软件基金会" target="_blank" rel="noopener">Apache软件基金会</a>主持的独立Apache项目。</p></blockquote><a id="more"></a><h3 id="一、安装Maven"><a href="#一、安装Maven" class="headerlink" title="一、安装Maven"></a>一、安装Maven</h3><p>1、Maven下载、解压<br>2、设置环境变量 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、新建变量M2_HOME，值为Maven的目录X:\XXX\apache-maven-XXX</span><br><span class="line">2、Path变量：将%M2_HOME%\bin添加到Path变量下</span><br></pre></td></tr></table></figure><p>3、运行CMD，输入mvn -v后可以看到Maven的版本信息等则表示安装成功</p><p>4、报错信息处理(如果正常输出版本信息则省略)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.不是内部或外部命令</span><br><span class="line">    解决方案：</span><br><span class="line">    编辑环境变量Path，以前是（%MAVEN_HOME%\bin\），改为E:\Mavenaven\apache-maven-3.5.0\bin(也就是bin目录的绝对路径)</span><br><span class="line">    重启DOS窗口。</span><br><span class="line"></span><br><span class="line">2.报错</span><br><span class="line">    Exception in thread “main”</span><br><span class="line">    java.lang.UnsupportedClassVersionError</span><br><span class="line">    这个错误是因为maven版本和jdk版本不兼容，需要更换jdk或maven版本</span><br></pre></td></tr></table></figure><h3 id="二、修改本地仓库的位置：（X-XXX-apache-maven-3-5-3指的是maven解压之后的路径，即环境变量M2-HOME的值）"><a href="#二、修改本地仓库的位置：（X-XXX-apache-maven-3-5-3指的是maven解压之后的路径，即环境变量M2-HOME的值）" class="headerlink" title="二、修改本地仓库的位置：（X:\XXX\apache-maven-3.5.3指的是maven解压之后的路径，即环境变量M2_HOME的值）"></a>二、修改本地仓库的位置：（X:\XXX\apache-maven-3.5.3指的是maven解压之后的路径，即环境变量M2_HOME的值）</h3><p>X:\XXX\apache-maven-3.5.3\conf\settings.xml文件：添加如下语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/Java/maven/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、Maven镜像更换为阿里云中央仓库："><a href="#三、Maven镜像更换为阿里云中央仓库：" class="headerlink" title="三、Maven镜像更换为阿里云中央仓库："></a>三、Maven镜像更换为阿里云中央仓库：</h3><p>X:\XXX\apache-maven-3.5.3\conf\settings.xml文件：在<mirrors>标签下添加如下语句：</mirrors></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt; </span><br><span class="line">  &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">  &lt;name&gt;aliyun maven&lt;/name&gt; </span><br><span class="line">  &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; </span><br><span class="line">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><h3 id="四、Eclipse中配置maven、创建maven项目"><a href="#四、Eclipse中配置maven、创建maven项目" class="headerlink" title="四、Eclipse中配置maven、创建maven项目"></a>四、Eclipse中配置maven、创建maven项目</h3><p>配置maven：<a href="https://www.cnblogs.com/pengyan-9826/p/7767070.html" target="_blank" rel="noopener">https://www.cnblogs.com/pengyan-9826/p/7767070.html</a><br>创建maven项目：<a href="https://blog.csdn.net/u012081441/article/details/75201197" target="_blank" rel="noopener">https://blog.csdn.net/u012081441/article/details/75201197</a></p><h3 id="五、安装spring-tool-suit插件"><a href="#五、安装spring-tool-suit插件" class="headerlink" title="五、安装spring-tool-suit插件"></a>五、安装spring-tool-suit插件</h3><p><a href="https://www.cnblogs.com/MrYoodb/p/7574566.html" target="_blank" rel="noopener">https://www.cnblogs.com/MrYoodb/p/7574566.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Apache Maven&lt;/strong&gt;，是一个&lt;a href=&quot;https://zh.wikipedia.org/wiki/软件&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;软件&lt;/a&gt;（特别是&lt;a href=&quot;https://zh.wikipedia.org/wiki/Java_(编程语言)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java&lt;/a&gt;软件）&lt;a href=&quot;https://zh.wikipedia.org/wiki/项目管理&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目管理&lt;/a&gt;及&lt;a href=&quot;https://zh.wikipedia.org/wiki/自动构建&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自动构建&lt;/a&gt;工具，由&lt;a href=&quot;https://zh.wikipedia.org/wiki/Apache软件基金会&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache软件基金会&lt;/a&gt;所提供。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。&lt;/p&gt;
&lt;p&gt;Maven也可被用于构建和管理各种项目，例如&lt;a href=&quot;https://zh.wikipedia.org/wiki/C♯&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;C#&lt;/a&gt;，&lt;a href=&quot;https://zh.wikipedia.org/wiki/Ruby&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ruby&lt;/a&gt;，&lt;a href=&quot;https://zh.wikipedia.org/wiki/Scala&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Scala&lt;/a&gt;和其他语言编写的项目。Maven曾是&lt;a href=&quot;https://zh.wikipedia.org/wiki/Jakarta项目&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jakarta项目&lt;/a&gt;的子项目，现为由&lt;a href=&quot;https://zh.wikipedia.org/wiki/Apache软件基金会&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache软件基金会&lt;/a&gt;主持的独立Apache项目。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Servlet+Jsp项目实战</title>
    <link href="http://zsblogs.com/2019/09/07/Servlet-Jsp%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    <id>http://zsblogs.com/2019/09/07/Servlet-Jsp项目实战/</id>
    <published>2019-09-07T07:44:45.000Z</published>
    <updated>2019-09-07T08:10:18.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信息管理系统"><a href="#信息管理系统" class="headerlink" title="信息管理系统"></a>信息管理系统</h2><h3 id="技术需求"><a href="#技术需求" class="headerlink" title="技术需求"></a>技术需求</h3><ul><li>Servlet+jsp+mvc+jdbc</li></ul><h3 id="软件需求："><a href="#软件需求：" class="headerlink" title="软件需求："></a>软件需求：</h3><ul><li>开发工具：myEclipse</li><li>数据库：MYSQL</li><li>服务器：Tomcat</li><li>浏览器：Firefox</li></ul><h3 id="硬件需求："><a href="#硬件需求：" class="headerlink" title="硬件需求："></a>硬件需求：</h3><ul><li>一台电脑</li></ul><h3 id="功能需求："><a href="#功能需求：" class="headerlink" title="功能需求："></a>功能需求：</h3><ul><li>完成用户登录</li><li>完成用户注册</li><li>完成用户退出</li><li>完成查看个人信息</li><li>完成修改密码</li><li>完成查询所有用户信息</li></ul><h3 id="数据库设计："><a href="#数据库设计：" class="headerlink" title="数据库设计："></a>数据库设计：</h3><p>创建用户表：t_user</p><p>表结构设计：</p><table><thead><tr><th align="center">字段名</th><th align="center">类型</th><th align="center">约束</th></tr></thead><tbody><tr><td align="center">uid</td><td align="center">int(10)</td><td align="center">主键、非空、自增</td></tr><tr><td align="center">uname</td><td align="center">varchar(50)</td><td align="center">非空</td></tr><tr><td align="center">pwd</td><td align="center">varchar(50)</td><td align="center">非空</td></tr><tr><td align="center">sex</td><td align="center">char(2)</td><td align="center">非空</td></tr><tr><td align="center">age</td><td align="center">int(3)</td><td align="center"></td></tr><tr><td align="center">birth</td><td align="center">date</td><td align="center"></td></tr></tbody></table><h3 id="代码规范："><a href="#代码规范：" class="headerlink" title="代码规范："></a>代码规范：</h3><h5 id="命名规范："><a href="#命名规范：" class="headerlink" title="命名规范："></a>命名规范：</h5><ul><li>包名：com.zs.*</li><li>类名：首字母大写，见名知意</li><li>变量名和方法名：驼峰原则，见名知意</li></ul><h5 id="注释规范："><a href="#注释规范：" class="headerlink" title="注释规范："></a>注释规范：</h5><ul><li>方法功能注释</li><li>方法体核心位置必须有说明注释</li></ul><h5 id="日志规范："><a href="#日志规范：" class="headerlink" title="日志规范："></a>日志规范：</h5><ul><li>使用log4j进行日志输出</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;信息管理系统&quot;&gt;&lt;a href=&quot;#信息管理系统&quot; class=&quot;headerlink&quot; title=&quot;信息管理系统&quot;&gt;&lt;/a&gt;信息管理系统&lt;/h2&gt;&lt;h3 id=&quot;技术需求&quot;&gt;&lt;a href=&quot;#技术需求&quot; class=&quot;headerlink&quot; title=&quot;技
      
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Jsp知识点整合</title>
    <link href="http://zsblogs.com/2019/09/07/Jsp%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E5%90%88/"/>
    <id>http://zsblogs.com/2019/09/07/Jsp知识点整合/</id>
    <published>2019-09-07T03:30:42.000Z</published>
    <updated>2019-09-08T12:52:37.181Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JSP 与 PHP、ASP、ASP.NET 等语言类似，运行在服务端的语言。</p><p>JSP（全称Java Server Pages）是由 Sun Microsystems 公司倡导和许多公司参与共同创建的一种使软件开发者可以响应客户端请求，而动态生成 HTML、XML 或其他格式文档的Web网页的技术标准。</p><p>JSP 技术是以 Java 语言作为脚本语言的，JSP 网页为整个服务器端的 Java 库单元提供了一个接口来服务于HTTP的应用程序。</p><p>JSP文件后缀名为 <strong>*.jsp</strong> 。</p><p>JSP开发的WEB应用可以跨平台使用，既可以运行在 Linux 上也能运行在 Windows 上。</p></blockquote><a id="more"></a><h3 id="Jsp的三种注释"><a href="#Jsp的三种注释" class="headerlink" title="Jsp的三种注释"></a>Jsp的三种注释</h3><p>前端语言注释：会被转译，也会被发送<br>java语言注释：会被转译，不会被servlet执行<br>Jsp注释：不会被转译</p><h3 id="Jsp的Page指令："><a href="#Jsp的Page指令：" class="headerlink" title="Jsp的Page指令："></a>Jsp的Page指令：</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> 属性名=<span class="string">"属性值"</span> 属性名=<span class="string">"属性值"</span> ...%&gt;</span><br></pre></td></tr></table></figure><p>​            <strong>language</strong>:声明jsp要被转义的语言（其实只能java）。<br>​            <strong>import</strong>：导入java包，不同的包使用逗号隔开<br>​            <strong>pageEncoding</strong>：当前jsp文件所保存的编码格式。<br>​            <strong>session</strong>:设置转义的servlet中是否开启session支持<br>​            <strong>errorPage</strong>：设置jsp运行错误跳转的页面<br>​            <strong>extends</strong>：设置jsp转义的java文件要继承的父类（包名加类名）<br>​<br>​    <strong>作用</strong>：<br>​        配置jsp文件转译相关的参数，必须要有。</p><h3 id="jsp的局部代码块："><a href="#jsp的局部代码块：" class="headerlink" title="jsp的局部代码块："></a>jsp的局部代码块：</h3><p>​    <strong>声明java代码</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%  <span class="keyword">int</span> i = <span class="number">4</span>;out.println(i);%&gt;</span><br></pre></td></tr></table></figure><p>​    <strong>特点</strong>：局部代码块中声明的java代码会被原样转译到对应servlet文件的_JspServlce方法中<br>​    <strong>缺点</strong>：使用局部代码快在jsp中进行逻辑判断，书写麻烦，阅读困难！<br>​    </p><h3 id="jsp的全局代码块："><a href="#jsp的全局代码块：" class="headerlink" title="jsp的全局代码块："></a>jsp的全局代码块：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"全局代码块"</span>);</span><br><span class="line">&#125;%&gt;</span><br></pre></td></tr></table></figure><p>​    特点：声明的java代码作为全局代码转译到sevlet中，不在servlce方法里。<br>​    注意：全局代码快声明的代码需要局部代码快调用。<br>​    </p><h3 id="jsp的脚本段语句："><a href="#jsp的脚本段语句：" class="headerlink" title="jsp的脚本段语句："></a>jsp的脚本段语句：</h3><p>​    特点：帮助我们快速的获取变量或者方法的返回值作为数据响应给浏览器<br>​    使用：&lt;%=变量名或方法%&gt;,<br>​    注意：不要在后面加分号<br>​    注意使用位置，不要瞎写。<br>​    </p><h3 id="jsp的静态引入和动态引入："><a href="#jsp的静态引入和动态引入：" class="headerlink" title="jsp的静态引入和动态引入："></a>jsp的静态引入和动态引入：</h3><p>​    <strong>静态引入</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@include file=&quot;要引入文件的相对路径&quot; %&gt;</span><br></pre></td></tr></table></figure><p>​        <strong>特点</strong>：<br>​            会将引入的jsp文件和当前jsp文件转译成一个java文件使用。<br>​        <strong>注意</strong>：</p><p>​            静态引入的jsp文件不会单独转译成单个java（Servlet）文件。<br>​            不能有同名变量。<br>  动态引入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"要引入的jsp文件的相对路径"</span>%&gt;</span><br></pre></td></tr></table></figure><p>​        特点：<br>​            会将引入法人jsp文件单独转译，也就是会新转译出一个java文件。<br>​            在当前转译好的java文件中调用引入的jsp文件的转译java文件，在网页中显示合并后的结果。<br>​            因为是两个文件，调用关系，所以可以存在同名变量。<br>​<br>​        注意：<br>​            动态引入允许声明同名变量<br>引入的优点：<br>​        降低jsp代码的冗余，便于维护升级。<br>​        </p><h3 id="jsp的转发标签–forward："><a href="#jsp的转发标签–forward：" class="headerlink" title="jsp的转发标签–forward："></a>jsp的转发标签–forward：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=&quot;要转发的jsp文件的相对路径&quot;&gt;&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure><p>​     特点：<br>​         一次请求<br>​         地址栏信息不改变<br>​     注意：<br>​         转发标签的额两个标签之间不能有空格<br>​         但是可以写&lt;jsp:param name=”str” value=”aaa” /&gt;,它会将数据以？的形式拼接在转发路径的后面<br>​         转发之后如何接收：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=request.getParameter(<span class="string">"str"</span>)%&gt;  可以直接输出value的值。</span><br></pre></td></tr></table></figure><p>​         </p><h3 id="jsp的九大内置对象："><a href="#jsp的九大内置对象：" class="headerlink" title="jsp的九大内置对象："></a>jsp的九大内置对象：</h3><p>​    内置对象：jsp文件在转移成对应的Servlet文件的时候，自动生成的并声明的变量。<br>​    注意：<br>​        内置对象在jsp页面中使用，使用局部代码快或脚本段语句来使用，不能再全局代码块中使用<br>​    九大对象：<br>​        pageContext：页面上下文对象，封存了其他内置对象。<br>​                注意：每个Jsp文件单独拥有一个pageContext对象<br>​                作用域：当前页面。<br>​        request：封存当前请求数据的对象，由tomcat服务器创建，一次请求。<br>​        session：此对象用来存储用户的不同请求的共享数据的，一次会话。<br>​        application：也就是ServletContext对象，一个项目只有一个，存储用户共享数据的对象，以及完成其他操作。<br>​        response：响应对象，用来响应请求处理结果给浏览器的对象，设置响应头，重定向。<br>​        out:响应对象，Jsp内部使用，带有缓冲区的响应对象，效率高于response对象。<br>​        Page：代表当前Jsp的对象，相当于Java中的this（其实转译完之后就是this….）。<br>​        exception：异常对象，存储了当前的运行异常信息。<br>​                注意：使用此对象需要在Page中设置属性isErrorPage=”true”开启。<br>​        config：也就是ServletConfig，主要用来获取web.xml的配置数据，完成一些初始化数据的读取。<br>​        </p><h3 id="Jsp四大作用域："><a href="#Jsp四大作用域：" class="headerlink" title="Jsp四大作用域："></a>Jsp四大作用域：</h3><p>​    <strong>pageContext</strong>：当前页面，当前页面内的数据共享。<br>​    <strong>request</strong>：一次请求内的servlet的数据共享，通过请求转发，将数据流转给下一个servlet。<br>​    <strong>session</strong>：一次会话。一个用户的不同请求数据的共享。将数据从一次请求流转给其他请求。<br>​    <strong>application</strong>：项目内。不同用户的数据共享问题。将数据从一个用户流转给其他用户。<br>​    <strong>作用</strong>：<br>​        数据的流转！</p><h3 id="Jsp的路径"><a href="#Jsp的路径" class="headerlink" title="Jsp的路径:"></a>Jsp的路径:</h3><p>​    在Jsp中资源路径可以使用<strong>相对路径</strong>完成跳转，但是：<br>​        问题一：资源的位置不可以随意更改。<br>​        问题二：需要使用../进行文件夹的跳出，使用麻烦，可读性较低。<br>​    使用<strong>绝对路径</strong>（开发最常用，必须会）：<br>​        /虚拟项目名/项目资源路径<br>​        “/“代表服务器根目录<br>​        相当于：ip:端口号   例如：localhost:8080<br>​    <strong>Jsp中自带的全局路径声明</strong>：<br>​        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path+<span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>​        还有head标签下的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>作用</strong>：给资源全面加项目路径：<a href="http://127.0.0.1:8080/虚拟项目名/" target="_blank" rel="noopener">http://127.0.0.1:8080/虚拟项目名/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JSP 与 PHP、ASP、ASP.NET 等语言类似，运行在服务端的语言。&lt;/p&gt;
&lt;p&gt;JSP（全称Java Server Pages）是由 Sun Microsystems 公司倡导和许多公司参与共同创建的一种使软件开发者可以响应客户端请求，而动态生成 HTML、XML 或其他格式文档的Web网页的技术标准。&lt;/p&gt;
&lt;p&gt;JSP 技术是以 Java 语言作为脚本语言的，JSP 网页为整个服务器端的 Java 库单元提供了一个接口来服务于HTTP的应用程序。&lt;/p&gt;
&lt;p&gt;JSP文件后缀名为 &lt;strong&gt;*.jsp&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;JSP开发的WEB应用可以跨平台使用，既可以运行在 Linux 上也能运行在 Windows 上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Servlet转发与重定向的区别和联系</title>
    <link href="http://zsblogs.com/2019/09/06/Servlet%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://zsblogs.com/2019/09/06/Servlet转发与重定向的区别/</id>
    <published>2019-09-06T06:43:26.000Z</published>
    <updated>2019-09-07T07:23:07.912Z</updated>
    
    <content type="html"><![CDATA[<p>本人正在学习java，之前一直困扰二者有什么区别，经过一番查阅资料，终于恍然大悟。</p><p>Servlet的转发有两种：转发和重定向。</p><p><strong>转发</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpServletRequest.getRequestDispatcher(&quot;资源路径&quot;).forward(httpServletRequest, httpServletResponse);</span><br></pre></td></tr></table></figure><p><strong>重定向</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpServletResponse.sendRedirect(&quot;/资源路径&quot;);</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>转发的过程</strong>：</p><ul><li>浏览器向服务器发送请求</li><li>服务器接收请求并处理请求</li><li>这时服务器发现有转发代码存在,</li><li>直接跳转到新的资源（注意：这个过程是连续的，在这个过程中session可以跟随传递）</li><li>网页显示返回结果，地址栏不会变化</li></ul><p><strong>重定向的过程</strong>：</p><ul><li>浏览器向服务器发送请求</li><li>服务器接收请求并处理请求</li><li>这时服务器发现有重定向代码存在</li><li>服务器会立即通知浏览器，告诉它，你去访问这个资源</li><li>这时浏览器会对新资源重新发起访问（这个过程是断开的，中间不连续）</li><li>地址栏产生相应的变化</li></ul><p><strong>二者的区别</strong>：</p><ul><li>转发地址栏不会变化，重定向会变化。</li><li>转发是一次请求，而重定向是两次。</li><li>转发速度较快，重定向较慢（因为浏览器要重新发起请求）。</li><li>由于重定向是重新对资源发起访问，而浏览器默认访问方式为get，所以对应的新响应要换成get，当然这是默认情况。注意一下即可。</li><li>转发不会造成信息丢失，而重定向则会造成信息丢失。</li><li>转发只能将请求转发给同一个WEB应用中的组件，重定向可以指向任何的资源，包括当前应用程序中的其他资源，同一个站点上的其他应用程序中的资源，其他站点的资源。**</li></ul><p>如何选择转发还是重定向？</p><p><strong>典型的应用场景</strong>：</p><p>​        <strong>转发：访问 Servlet 处理业务逻辑，然后 forward 到 jsp 显示处理结果，浏览器里 URL 不变</strong></p><p>​        <strong>重定向:提交表单，处理成功后 redirect 到另一个 jsp，防止表单重复提交，浏览器里 URL 变了</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本人正在学习java，之前一直困扰二者有什么区别，经过一番查阅资料，终于恍然大悟。&lt;/p&gt;
&lt;p&gt;Servlet的转发有两种：转发和重定向。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;转发&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;httpServletRequest.getRequestDispatcher(&amp;quot;资源路径&amp;quot;).forward(httpServletRequest, httpServletResponse);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;重定向&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;httpServletResponse.sendRedirect(&amp;quot;/资源路径&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://zsblogs.com/categories/JAVA/"/>
    
    
      <category term="博客" scheme="http://zsblogs.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
